/* SPDX-License-Identifier: Apache-2.0
   Copyright (c) 2023 Dell Inc, or its subsidiaries.
*/
// Code generated by mockery v2.33.1. DO NOT EDIT.

package mocks

import (
	context "context"

	_go "github.com/opiproject/opi-api/storage/v1alpha1/gen/go"

	emptypb "google.golang.org/protobuf/types/known/emptypb"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// NvmeRemoteControllerServiceClient is an autogenerated mock type for the NvmeRemoteControllerServiceClient type
type NvmeRemoteControllerServiceClient struct {
	mock.Mock
}

type NvmeRemoteControllerServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *NvmeRemoteControllerServiceClient) EXPECT() *NvmeRemoteControllerServiceClient_Expecter {
	return &NvmeRemoteControllerServiceClient_Expecter{mock: &_m.Mock}
}

// CreateNvmePath provides a mock function with given fields: ctx, in, opts
func (_m *NvmeRemoteControllerServiceClient) CreateNvmePath(ctx context.Context, in *_go.CreateNvmePathRequest, opts ...grpc.CallOption) (*_go.NvmePath, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *_go.NvmePath
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *_go.CreateNvmePathRequest, ...grpc.CallOption) (*_go.NvmePath, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *_go.CreateNvmePathRequest, ...grpc.CallOption) *_go.NvmePath); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*_go.NvmePath)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *_go.CreateNvmePathRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NvmeRemoteControllerServiceClient_CreateNvmePath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateNvmePath'
type NvmeRemoteControllerServiceClient_CreateNvmePath_Call struct {
	*mock.Call
}

// CreateNvmePath is a helper method to define mock.On call
//   - ctx context.Context
//   - in *_go.CreateNvmePathRequest
//   - opts ...grpc.CallOption
func (_e *NvmeRemoteControllerServiceClient_Expecter) CreateNvmePath(ctx interface{}, in interface{}, opts ...interface{}) *NvmeRemoteControllerServiceClient_CreateNvmePath_Call {
	return &NvmeRemoteControllerServiceClient_CreateNvmePath_Call{Call: _e.mock.On("CreateNvmePath",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *NvmeRemoteControllerServiceClient_CreateNvmePath_Call) Run(run func(ctx context.Context, in *_go.CreateNvmePathRequest, opts ...grpc.CallOption)) *NvmeRemoteControllerServiceClient_CreateNvmePath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*_go.CreateNvmePathRequest), variadicArgs...)
	})
	return _c
}

func (_c *NvmeRemoteControllerServiceClient_CreateNvmePath_Call) Return(_a0 *_go.NvmePath, _a1 error) *NvmeRemoteControllerServiceClient_CreateNvmePath_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NvmeRemoteControllerServiceClient_CreateNvmePath_Call) RunAndReturn(run func(context.Context, *_go.CreateNvmePathRequest, ...grpc.CallOption) (*_go.NvmePath, error)) *NvmeRemoteControllerServiceClient_CreateNvmePath_Call {
	_c.Call.Return(run)
	return _c
}

// CreateNvmeRemoteController provides a mock function with given fields: ctx, in, opts
func (_m *NvmeRemoteControllerServiceClient) CreateNvmeRemoteController(ctx context.Context, in *_go.CreateNvmeRemoteControllerRequest, opts ...grpc.CallOption) (*_go.NvmeRemoteController, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *_go.NvmeRemoteController
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *_go.CreateNvmeRemoteControllerRequest, ...grpc.CallOption) (*_go.NvmeRemoteController, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *_go.CreateNvmeRemoteControllerRequest, ...grpc.CallOption) *_go.NvmeRemoteController); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*_go.NvmeRemoteController)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *_go.CreateNvmeRemoteControllerRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NvmeRemoteControllerServiceClient_CreateNvmeRemoteController_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateNvmeRemoteController'
type NvmeRemoteControllerServiceClient_CreateNvmeRemoteController_Call struct {
	*mock.Call
}

// CreateNvmeRemoteController is a helper method to define mock.On call
//   - ctx context.Context
//   - in *_go.CreateNvmeRemoteControllerRequest
//   - opts ...grpc.CallOption
func (_e *NvmeRemoteControllerServiceClient_Expecter) CreateNvmeRemoteController(ctx interface{}, in interface{}, opts ...interface{}) *NvmeRemoteControllerServiceClient_CreateNvmeRemoteController_Call {
	return &NvmeRemoteControllerServiceClient_CreateNvmeRemoteController_Call{Call: _e.mock.On("CreateNvmeRemoteController",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *NvmeRemoteControllerServiceClient_CreateNvmeRemoteController_Call) Run(run func(ctx context.Context, in *_go.CreateNvmeRemoteControllerRequest, opts ...grpc.CallOption)) *NvmeRemoteControllerServiceClient_CreateNvmeRemoteController_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*_go.CreateNvmeRemoteControllerRequest), variadicArgs...)
	})
	return _c
}

func (_c *NvmeRemoteControllerServiceClient_CreateNvmeRemoteController_Call) Return(_a0 *_go.NvmeRemoteController, _a1 error) *NvmeRemoteControllerServiceClient_CreateNvmeRemoteController_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NvmeRemoteControllerServiceClient_CreateNvmeRemoteController_Call) RunAndReturn(run func(context.Context, *_go.CreateNvmeRemoteControllerRequest, ...grpc.CallOption) (*_go.NvmeRemoteController, error)) *NvmeRemoteControllerServiceClient_CreateNvmeRemoteController_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteNvmePath provides a mock function with given fields: ctx, in, opts
func (_m *NvmeRemoteControllerServiceClient) DeleteNvmePath(ctx context.Context, in *_go.DeleteNvmePathRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *emptypb.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *_go.DeleteNvmePathRequest, ...grpc.CallOption) (*emptypb.Empty, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *_go.DeleteNvmePathRequest, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *_go.DeleteNvmePathRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NvmeRemoteControllerServiceClient_DeleteNvmePath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteNvmePath'
type NvmeRemoteControllerServiceClient_DeleteNvmePath_Call struct {
	*mock.Call
}

// DeleteNvmePath is a helper method to define mock.On call
//   - ctx context.Context
//   - in *_go.DeleteNvmePathRequest
//   - opts ...grpc.CallOption
func (_e *NvmeRemoteControllerServiceClient_Expecter) DeleteNvmePath(ctx interface{}, in interface{}, opts ...interface{}) *NvmeRemoteControllerServiceClient_DeleteNvmePath_Call {
	return &NvmeRemoteControllerServiceClient_DeleteNvmePath_Call{Call: _e.mock.On("DeleteNvmePath",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *NvmeRemoteControllerServiceClient_DeleteNvmePath_Call) Run(run func(ctx context.Context, in *_go.DeleteNvmePathRequest, opts ...grpc.CallOption)) *NvmeRemoteControllerServiceClient_DeleteNvmePath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*_go.DeleteNvmePathRequest), variadicArgs...)
	})
	return _c
}

func (_c *NvmeRemoteControllerServiceClient_DeleteNvmePath_Call) Return(_a0 *emptypb.Empty, _a1 error) *NvmeRemoteControllerServiceClient_DeleteNvmePath_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NvmeRemoteControllerServiceClient_DeleteNvmePath_Call) RunAndReturn(run func(context.Context, *_go.DeleteNvmePathRequest, ...grpc.CallOption) (*emptypb.Empty, error)) *NvmeRemoteControllerServiceClient_DeleteNvmePath_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteNvmeRemoteController provides a mock function with given fields: ctx, in, opts
func (_m *NvmeRemoteControllerServiceClient) DeleteNvmeRemoteController(ctx context.Context, in *_go.DeleteNvmeRemoteControllerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *emptypb.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *_go.DeleteNvmeRemoteControllerRequest, ...grpc.CallOption) (*emptypb.Empty, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *_go.DeleteNvmeRemoteControllerRequest, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *_go.DeleteNvmeRemoteControllerRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NvmeRemoteControllerServiceClient_DeleteNvmeRemoteController_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteNvmeRemoteController'
type NvmeRemoteControllerServiceClient_DeleteNvmeRemoteController_Call struct {
	*mock.Call
}

// DeleteNvmeRemoteController is a helper method to define mock.On call
//   - ctx context.Context
//   - in *_go.DeleteNvmeRemoteControllerRequest
//   - opts ...grpc.CallOption
func (_e *NvmeRemoteControllerServiceClient_Expecter) DeleteNvmeRemoteController(ctx interface{}, in interface{}, opts ...interface{}) *NvmeRemoteControllerServiceClient_DeleteNvmeRemoteController_Call {
	return &NvmeRemoteControllerServiceClient_DeleteNvmeRemoteController_Call{Call: _e.mock.On("DeleteNvmeRemoteController",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *NvmeRemoteControllerServiceClient_DeleteNvmeRemoteController_Call) Run(run func(ctx context.Context, in *_go.DeleteNvmeRemoteControllerRequest, opts ...grpc.CallOption)) *NvmeRemoteControllerServiceClient_DeleteNvmeRemoteController_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*_go.DeleteNvmeRemoteControllerRequest), variadicArgs...)
	})
	return _c
}

func (_c *NvmeRemoteControllerServiceClient_DeleteNvmeRemoteController_Call) Return(_a0 *emptypb.Empty, _a1 error) *NvmeRemoteControllerServiceClient_DeleteNvmeRemoteController_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NvmeRemoteControllerServiceClient_DeleteNvmeRemoteController_Call) RunAndReturn(run func(context.Context, *_go.DeleteNvmeRemoteControllerRequest, ...grpc.CallOption) (*emptypb.Empty, error)) *NvmeRemoteControllerServiceClient_DeleteNvmeRemoteController_Call {
	_c.Call.Return(run)
	return _c
}

// GetNvmePath provides a mock function with given fields: ctx, in, opts
func (_m *NvmeRemoteControllerServiceClient) GetNvmePath(ctx context.Context, in *_go.GetNvmePathRequest, opts ...grpc.CallOption) (*_go.NvmePath, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *_go.NvmePath
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *_go.GetNvmePathRequest, ...grpc.CallOption) (*_go.NvmePath, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *_go.GetNvmePathRequest, ...grpc.CallOption) *_go.NvmePath); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*_go.NvmePath)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *_go.GetNvmePathRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NvmeRemoteControllerServiceClient_GetNvmePath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNvmePath'
type NvmeRemoteControllerServiceClient_GetNvmePath_Call struct {
	*mock.Call
}

// GetNvmePath is a helper method to define mock.On call
//   - ctx context.Context
//   - in *_go.GetNvmePathRequest
//   - opts ...grpc.CallOption
func (_e *NvmeRemoteControllerServiceClient_Expecter) GetNvmePath(ctx interface{}, in interface{}, opts ...interface{}) *NvmeRemoteControllerServiceClient_GetNvmePath_Call {
	return &NvmeRemoteControllerServiceClient_GetNvmePath_Call{Call: _e.mock.On("GetNvmePath",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *NvmeRemoteControllerServiceClient_GetNvmePath_Call) Run(run func(ctx context.Context, in *_go.GetNvmePathRequest, opts ...grpc.CallOption)) *NvmeRemoteControllerServiceClient_GetNvmePath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*_go.GetNvmePathRequest), variadicArgs...)
	})
	return _c
}

func (_c *NvmeRemoteControllerServiceClient_GetNvmePath_Call) Return(_a0 *_go.NvmePath, _a1 error) *NvmeRemoteControllerServiceClient_GetNvmePath_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NvmeRemoteControllerServiceClient_GetNvmePath_Call) RunAndReturn(run func(context.Context, *_go.GetNvmePathRequest, ...grpc.CallOption) (*_go.NvmePath, error)) *NvmeRemoteControllerServiceClient_GetNvmePath_Call {
	_c.Call.Return(run)
	return _c
}

// GetNvmeRemoteController provides a mock function with given fields: ctx, in, opts
func (_m *NvmeRemoteControllerServiceClient) GetNvmeRemoteController(ctx context.Context, in *_go.GetNvmeRemoteControllerRequest, opts ...grpc.CallOption) (*_go.NvmeRemoteController, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *_go.NvmeRemoteController
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *_go.GetNvmeRemoteControllerRequest, ...grpc.CallOption) (*_go.NvmeRemoteController, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *_go.GetNvmeRemoteControllerRequest, ...grpc.CallOption) *_go.NvmeRemoteController); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*_go.NvmeRemoteController)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *_go.GetNvmeRemoteControllerRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NvmeRemoteControllerServiceClient_GetNvmeRemoteController_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNvmeRemoteController'
type NvmeRemoteControllerServiceClient_GetNvmeRemoteController_Call struct {
	*mock.Call
}

// GetNvmeRemoteController is a helper method to define mock.On call
//   - ctx context.Context
//   - in *_go.GetNvmeRemoteControllerRequest
//   - opts ...grpc.CallOption
func (_e *NvmeRemoteControllerServiceClient_Expecter) GetNvmeRemoteController(ctx interface{}, in interface{}, opts ...interface{}) *NvmeRemoteControllerServiceClient_GetNvmeRemoteController_Call {
	return &NvmeRemoteControllerServiceClient_GetNvmeRemoteController_Call{Call: _e.mock.On("GetNvmeRemoteController",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *NvmeRemoteControllerServiceClient_GetNvmeRemoteController_Call) Run(run func(ctx context.Context, in *_go.GetNvmeRemoteControllerRequest, opts ...grpc.CallOption)) *NvmeRemoteControllerServiceClient_GetNvmeRemoteController_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*_go.GetNvmeRemoteControllerRequest), variadicArgs...)
	})
	return _c
}

func (_c *NvmeRemoteControllerServiceClient_GetNvmeRemoteController_Call) Return(_a0 *_go.NvmeRemoteController, _a1 error) *NvmeRemoteControllerServiceClient_GetNvmeRemoteController_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NvmeRemoteControllerServiceClient_GetNvmeRemoteController_Call) RunAndReturn(run func(context.Context, *_go.GetNvmeRemoteControllerRequest, ...grpc.CallOption) (*_go.NvmeRemoteController, error)) *NvmeRemoteControllerServiceClient_GetNvmeRemoteController_Call {
	_c.Call.Return(run)
	return _c
}

// ListNvmePaths provides a mock function with given fields: ctx, in, opts
func (_m *NvmeRemoteControllerServiceClient) ListNvmePaths(ctx context.Context, in *_go.ListNvmePathsRequest, opts ...grpc.CallOption) (*_go.ListNvmePathsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *_go.ListNvmePathsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *_go.ListNvmePathsRequest, ...grpc.CallOption) (*_go.ListNvmePathsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *_go.ListNvmePathsRequest, ...grpc.CallOption) *_go.ListNvmePathsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*_go.ListNvmePathsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *_go.ListNvmePathsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NvmeRemoteControllerServiceClient_ListNvmePaths_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListNvmePaths'
type NvmeRemoteControllerServiceClient_ListNvmePaths_Call struct {
	*mock.Call
}

// ListNvmePaths is a helper method to define mock.On call
//   - ctx context.Context
//   - in *_go.ListNvmePathsRequest
//   - opts ...grpc.CallOption
func (_e *NvmeRemoteControllerServiceClient_Expecter) ListNvmePaths(ctx interface{}, in interface{}, opts ...interface{}) *NvmeRemoteControllerServiceClient_ListNvmePaths_Call {
	return &NvmeRemoteControllerServiceClient_ListNvmePaths_Call{Call: _e.mock.On("ListNvmePaths",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *NvmeRemoteControllerServiceClient_ListNvmePaths_Call) Run(run func(ctx context.Context, in *_go.ListNvmePathsRequest, opts ...grpc.CallOption)) *NvmeRemoteControllerServiceClient_ListNvmePaths_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*_go.ListNvmePathsRequest), variadicArgs...)
	})
	return _c
}

func (_c *NvmeRemoteControllerServiceClient_ListNvmePaths_Call) Return(_a0 *_go.ListNvmePathsResponse, _a1 error) *NvmeRemoteControllerServiceClient_ListNvmePaths_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NvmeRemoteControllerServiceClient_ListNvmePaths_Call) RunAndReturn(run func(context.Context, *_go.ListNvmePathsRequest, ...grpc.CallOption) (*_go.ListNvmePathsResponse, error)) *NvmeRemoteControllerServiceClient_ListNvmePaths_Call {
	_c.Call.Return(run)
	return _c
}

// ListNvmeRemoteControllers provides a mock function with given fields: ctx, in, opts
func (_m *NvmeRemoteControllerServiceClient) ListNvmeRemoteControllers(ctx context.Context, in *_go.ListNvmeRemoteControllersRequest, opts ...grpc.CallOption) (*_go.ListNvmeRemoteControllersResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *_go.ListNvmeRemoteControllersResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *_go.ListNvmeRemoteControllersRequest, ...grpc.CallOption) (*_go.ListNvmeRemoteControllersResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *_go.ListNvmeRemoteControllersRequest, ...grpc.CallOption) *_go.ListNvmeRemoteControllersResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*_go.ListNvmeRemoteControllersResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *_go.ListNvmeRemoteControllersRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NvmeRemoteControllerServiceClient_ListNvmeRemoteControllers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListNvmeRemoteControllers'
type NvmeRemoteControllerServiceClient_ListNvmeRemoteControllers_Call struct {
	*mock.Call
}

// ListNvmeRemoteControllers is a helper method to define mock.On call
//   - ctx context.Context
//   - in *_go.ListNvmeRemoteControllersRequest
//   - opts ...grpc.CallOption
func (_e *NvmeRemoteControllerServiceClient_Expecter) ListNvmeRemoteControllers(ctx interface{}, in interface{}, opts ...interface{}) *NvmeRemoteControllerServiceClient_ListNvmeRemoteControllers_Call {
	return &NvmeRemoteControllerServiceClient_ListNvmeRemoteControllers_Call{Call: _e.mock.On("ListNvmeRemoteControllers",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *NvmeRemoteControllerServiceClient_ListNvmeRemoteControllers_Call) Run(run func(ctx context.Context, in *_go.ListNvmeRemoteControllersRequest, opts ...grpc.CallOption)) *NvmeRemoteControllerServiceClient_ListNvmeRemoteControllers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*_go.ListNvmeRemoteControllersRequest), variadicArgs...)
	})
	return _c
}

func (_c *NvmeRemoteControllerServiceClient_ListNvmeRemoteControllers_Call) Return(_a0 *_go.ListNvmeRemoteControllersResponse, _a1 error) *NvmeRemoteControllerServiceClient_ListNvmeRemoteControllers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NvmeRemoteControllerServiceClient_ListNvmeRemoteControllers_Call) RunAndReturn(run func(context.Context, *_go.ListNvmeRemoteControllersRequest, ...grpc.CallOption) (*_go.ListNvmeRemoteControllersResponse, error)) *NvmeRemoteControllerServiceClient_ListNvmeRemoteControllers_Call {
	_c.Call.Return(run)
	return _c
}

// ListNvmeRemoteNamespaces provides a mock function with given fields: ctx, in, opts
func (_m *NvmeRemoteControllerServiceClient) ListNvmeRemoteNamespaces(ctx context.Context, in *_go.ListNvmeRemoteNamespacesRequest, opts ...grpc.CallOption) (*_go.ListNvmeRemoteNamespacesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *_go.ListNvmeRemoteNamespacesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *_go.ListNvmeRemoteNamespacesRequest, ...grpc.CallOption) (*_go.ListNvmeRemoteNamespacesResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *_go.ListNvmeRemoteNamespacesRequest, ...grpc.CallOption) *_go.ListNvmeRemoteNamespacesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*_go.ListNvmeRemoteNamespacesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *_go.ListNvmeRemoteNamespacesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NvmeRemoteControllerServiceClient_ListNvmeRemoteNamespaces_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListNvmeRemoteNamespaces'
type NvmeRemoteControllerServiceClient_ListNvmeRemoteNamespaces_Call struct {
	*mock.Call
}

// ListNvmeRemoteNamespaces is a helper method to define mock.On call
//   - ctx context.Context
//   - in *_go.ListNvmeRemoteNamespacesRequest
//   - opts ...grpc.CallOption
func (_e *NvmeRemoteControllerServiceClient_Expecter) ListNvmeRemoteNamespaces(ctx interface{}, in interface{}, opts ...interface{}) *NvmeRemoteControllerServiceClient_ListNvmeRemoteNamespaces_Call {
	return &NvmeRemoteControllerServiceClient_ListNvmeRemoteNamespaces_Call{Call: _e.mock.On("ListNvmeRemoteNamespaces",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *NvmeRemoteControllerServiceClient_ListNvmeRemoteNamespaces_Call) Run(run func(ctx context.Context, in *_go.ListNvmeRemoteNamespacesRequest, opts ...grpc.CallOption)) *NvmeRemoteControllerServiceClient_ListNvmeRemoteNamespaces_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*_go.ListNvmeRemoteNamespacesRequest), variadicArgs...)
	})
	return _c
}

func (_c *NvmeRemoteControllerServiceClient_ListNvmeRemoteNamespaces_Call) Return(_a0 *_go.ListNvmeRemoteNamespacesResponse, _a1 error) *NvmeRemoteControllerServiceClient_ListNvmeRemoteNamespaces_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NvmeRemoteControllerServiceClient_ListNvmeRemoteNamespaces_Call) RunAndReturn(run func(context.Context, *_go.ListNvmeRemoteNamespacesRequest, ...grpc.CallOption) (*_go.ListNvmeRemoteNamespacesResponse, error)) *NvmeRemoteControllerServiceClient_ListNvmeRemoteNamespaces_Call {
	_c.Call.Return(run)
	return _c
}

// ResetNvmeRemoteController provides a mock function with given fields: ctx, in, opts
func (_m *NvmeRemoteControllerServiceClient) ResetNvmeRemoteController(ctx context.Context, in *_go.ResetNvmeRemoteControllerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *emptypb.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *_go.ResetNvmeRemoteControllerRequest, ...grpc.CallOption) (*emptypb.Empty, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *_go.ResetNvmeRemoteControllerRequest, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *_go.ResetNvmeRemoteControllerRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NvmeRemoteControllerServiceClient_ResetNvmeRemoteController_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResetNvmeRemoteController'
type NvmeRemoteControllerServiceClient_ResetNvmeRemoteController_Call struct {
	*mock.Call
}

// ResetNvmeRemoteController is a helper method to define mock.On call
//   - ctx context.Context
//   - in *_go.ResetNvmeRemoteControllerRequest
//   - opts ...grpc.CallOption
func (_e *NvmeRemoteControllerServiceClient_Expecter) ResetNvmeRemoteController(ctx interface{}, in interface{}, opts ...interface{}) *NvmeRemoteControllerServiceClient_ResetNvmeRemoteController_Call {
	return &NvmeRemoteControllerServiceClient_ResetNvmeRemoteController_Call{Call: _e.mock.On("ResetNvmeRemoteController",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *NvmeRemoteControllerServiceClient_ResetNvmeRemoteController_Call) Run(run func(ctx context.Context, in *_go.ResetNvmeRemoteControllerRequest, opts ...grpc.CallOption)) *NvmeRemoteControllerServiceClient_ResetNvmeRemoteController_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*_go.ResetNvmeRemoteControllerRequest), variadicArgs...)
	})
	return _c
}

func (_c *NvmeRemoteControllerServiceClient_ResetNvmeRemoteController_Call) Return(_a0 *emptypb.Empty, _a1 error) *NvmeRemoteControllerServiceClient_ResetNvmeRemoteController_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NvmeRemoteControllerServiceClient_ResetNvmeRemoteController_Call) RunAndReturn(run func(context.Context, *_go.ResetNvmeRemoteControllerRequest, ...grpc.CallOption) (*emptypb.Empty, error)) *NvmeRemoteControllerServiceClient_ResetNvmeRemoteController_Call {
	_c.Call.Return(run)
	return _c
}

// StatsNvmePath provides a mock function with given fields: ctx, in, opts
func (_m *NvmeRemoteControllerServiceClient) StatsNvmePath(ctx context.Context, in *_go.StatsNvmePathRequest, opts ...grpc.CallOption) (*_go.StatsNvmePathResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *_go.StatsNvmePathResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *_go.StatsNvmePathRequest, ...grpc.CallOption) (*_go.StatsNvmePathResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *_go.StatsNvmePathRequest, ...grpc.CallOption) *_go.StatsNvmePathResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*_go.StatsNvmePathResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *_go.StatsNvmePathRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NvmeRemoteControllerServiceClient_StatsNvmePath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StatsNvmePath'
type NvmeRemoteControllerServiceClient_StatsNvmePath_Call struct {
	*mock.Call
}

// StatsNvmePath is a helper method to define mock.On call
//   - ctx context.Context
//   - in *_go.StatsNvmePathRequest
//   - opts ...grpc.CallOption
func (_e *NvmeRemoteControllerServiceClient_Expecter) StatsNvmePath(ctx interface{}, in interface{}, opts ...interface{}) *NvmeRemoteControllerServiceClient_StatsNvmePath_Call {
	return &NvmeRemoteControllerServiceClient_StatsNvmePath_Call{Call: _e.mock.On("StatsNvmePath",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *NvmeRemoteControllerServiceClient_StatsNvmePath_Call) Run(run func(ctx context.Context, in *_go.StatsNvmePathRequest, opts ...grpc.CallOption)) *NvmeRemoteControllerServiceClient_StatsNvmePath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*_go.StatsNvmePathRequest), variadicArgs...)
	})
	return _c
}

func (_c *NvmeRemoteControllerServiceClient_StatsNvmePath_Call) Return(_a0 *_go.StatsNvmePathResponse, _a1 error) *NvmeRemoteControllerServiceClient_StatsNvmePath_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NvmeRemoteControllerServiceClient_StatsNvmePath_Call) RunAndReturn(run func(context.Context, *_go.StatsNvmePathRequest, ...grpc.CallOption) (*_go.StatsNvmePathResponse, error)) *NvmeRemoteControllerServiceClient_StatsNvmePath_Call {
	_c.Call.Return(run)
	return _c
}

// StatsNvmeRemoteController provides a mock function with given fields: ctx, in, opts
func (_m *NvmeRemoteControllerServiceClient) StatsNvmeRemoteController(ctx context.Context, in *_go.StatsNvmeRemoteControllerRequest, opts ...grpc.CallOption) (*_go.StatsNvmeRemoteControllerResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *_go.StatsNvmeRemoteControllerResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *_go.StatsNvmeRemoteControllerRequest, ...grpc.CallOption) (*_go.StatsNvmeRemoteControllerResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *_go.StatsNvmeRemoteControllerRequest, ...grpc.CallOption) *_go.StatsNvmeRemoteControllerResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*_go.StatsNvmeRemoteControllerResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *_go.StatsNvmeRemoteControllerRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NvmeRemoteControllerServiceClient_StatsNvmeRemoteController_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StatsNvmeRemoteController'
type NvmeRemoteControllerServiceClient_StatsNvmeRemoteController_Call struct {
	*mock.Call
}

// StatsNvmeRemoteController is a helper method to define mock.On call
//   - ctx context.Context
//   - in *_go.StatsNvmeRemoteControllerRequest
//   - opts ...grpc.CallOption
func (_e *NvmeRemoteControllerServiceClient_Expecter) StatsNvmeRemoteController(ctx interface{}, in interface{}, opts ...interface{}) *NvmeRemoteControllerServiceClient_StatsNvmeRemoteController_Call {
	return &NvmeRemoteControllerServiceClient_StatsNvmeRemoteController_Call{Call: _e.mock.On("StatsNvmeRemoteController",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *NvmeRemoteControllerServiceClient_StatsNvmeRemoteController_Call) Run(run func(ctx context.Context, in *_go.StatsNvmeRemoteControllerRequest, opts ...grpc.CallOption)) *NvmeRemoteControllerServiceClient_StatsNvmeRemoteController_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*_go.StatsNvmeRemoteControllerRequest), variadicArgs...)
	})
	return _c
}

func (_c *NvmeRemoteControllerServiceClient_StatsNvmeRemoteController_Call) Return(_a0 *_go.StatsNvmeRemoteControllerResponse, _a1 error) *NvmeRemoteControllerServiceClient_StatsNvmeRemoteController_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NvmeRemoteControllerServiceClient_StatsNvmeRemoteController_Call) RunAndReturn(run func(context.Context, *_go.StatsNvmeRemoteControllerRequest, ...grpc.CallOption) (*_go.StatsNvmeRemoteControllerResponse, error)) *NvmeRemoteControllerServiceClient_StatsNvmeRemoteController_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateNvmePath provides a mock function with given fields: ctx, in, opts
func (_m *NvmeRemoteControllerServiceClient) UpdateNvmePath(ctx context.Context, in *_go.UpdateNvmePathRequest, opts ...grpc.CallOption) (*_go.NvmePath, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *_go.NvmePath
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *_go.UpdateNvmePathRequest, ...grpc.CallOption) (*_go.NvmePath, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *_go.UpdateNvmePathRequest, ...grpc.CallOption) *_go.NvmePath); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*_go.NvmePath)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *_go.UpdateNvmePathRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NvmeRemoteControllerServiceClient_UpdateNvmePath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateNvmePath'
type NvmeRemoteControllerServiceClient_UpdateNvmePath_Call struct {
	*mock.Call
}

// UpdateNvmePath is a helper method to define mock.On call
//   - ctx context.Context
//   - in *_go.UpdateNvmePathRequest
//   - opts ...grpc.CallOption
func (_e *NvmeRemoteControllerServiceClient_Expecter) UpdateNvmePath(ctx interface{}, in interface{}, opts ...interface{}) *NvmeRemoteControllerServiceClient_UpdateNvmePath_Call {
	return &NvmeRemoteControllerServiceClient_UpdateNvmePath_Call{Call: _e.mock.On("UpdateNvmePath",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *NvmeRemoteControllerServiceClient_UpdateNvmePath_Call) Run(run func(ctx context.Context, in *_go.UpdateNvmePathRequest, opts ...grpc.CallOption)) *NvmeRemoteControllerServiceClient_UpdateNvmePath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*_go.UpdateNvmePathRequest), variadicArgs...)
	})
	return _c
}

func (_c *NvmeRemoteControllerServiceClient_UpdateNvmePath_Call) Return(_a0 *_go.NvmePath, _a1 error) *NvmeRemoteControllerServiceClient_UpdateNvmePath_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NvmeRemoteControllerServiceClient_UpdateNvmePath_Call) RunAndReturn(run func(context.Context, *_go.UpdateNvmePathRequest, ...grpc.CallOption) (*_go.NvmePath, error)) *NvmeRemoteControllerServiceClient_UpdateNvmePath_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateNvmeRemoteController provides a mock function with given fields: ctx, in, opts
func (_m *NvmeRemoteControllerServiceClient) UpdateNvmeRemoteController(ctx context.Context, in *_go.UpdateNvmeRemoteControllerRequest, opts ...grpc.CallOption) (*_go.NvmeRemoteController, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *_go.NvmeRemoteController
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *_go.UpdateNvmeRemoteControllerRequest, ...grpc.CallOption) (*_go.NvmeRemoteController, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *_go.UpdateNvmeRemoteControllerRequest, ...grpc.CallOption) *_go.NvmeRemoteController); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*_go.NvmeRemoteController)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *_go.UpdateNvmeRemoteControllerRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NvmeRemoteControllerServiceClient_UpdateNvmeRemoteController_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateNvmeRemoteController'
type NvmeRemoteControllerServiceClient_UpdateNvmeRemoteController_Call struct {
	*mock.Call
}

// UpdateNvmeRemoteController is a helper method to define mock.On call
//   - ctx context.Context
//   - in *_go.UpdateNvmeRemoteControllerRequest
//   - opts ...grpc.CallOption
func (_e *NvmeRemoteControllerServiceClient_Expecter) UpdateNvmeRemoteController(ctx interface{}, in interface{}, opts ...interface{}) *NvmeRemoteControllerServiceClient_UpdateNvmeRemoteController_Call {
	return &NvmeRemoteControllerServiceClient_UpdateNvmeRemoteController_Call{Call: _e.mock.On("UpdateNvmeRemoteController",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *NvmeRemoteControllerServiceClient_UpdateNvmeRemoteController_Call) Run(run func(ctx context.Context, in *_go.UpdateNvmeRemoteControllerRequest, opts ...grpc.CallOption)) *NvmeRemoteControllerServiceClient_UpdateNvmeRemoteController_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*_go.UpdateNvmeRemoteControllerRequest), variadicArgs...)
	})
	return _c
}

func (_c *NvmeRemoteControllerServiceClient_UpdateNvmeRemoteController_Call) Return(_a0 *_go.NvmeRemoteController, _a1 error) *NvmeRemoteControllerServiceClient_UpdateNvmeRemoteController_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NvmeRemoteControllerServiceClient_UpdateNvmeRemoteController_Call) RunAndReturn(run func(context.Context, *_go.UpdateNvmeRemoteControllerRequest, ...grpc.CallOption) (*_go.NvmeRemoteController, error)) *NvmeRemoteControllerServiceClient_UpdateNvmeRemoteController_Call {
	_c.Call.Return(run)
	return _c
}

// NewNvmeRemoteControllerServiceClient creates a new instance of NvmeRemoteControllerServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNvmeRemoteControllerServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *NvmeRemoteControllerServiceClient {
	mock := &NvmeRemoteControllerServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
