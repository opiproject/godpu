/* SPDX-License-Identifier: Apache-2.0
   Copyright (c) 2023 Dell Inc, or its subsidiaries.
*/
// Code generated by mockery v2.33.1. DO NOT EDIT.

package mocks

import (
	context "context"

	_go "github.com/opiproject/opi-api/storage/v1alpha1/gen/go"

	emptypb "google.golang.org/protobuf/types/known/emptypb"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// FrontendVirtioBlkServiceClient is an autogenerated mock type for the FrontendVirtioBlkServiceClient type
type FrontendVirtioBlkServiceClient struct {
	mock.Mock
}

type FrontendVirtioBlkServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *FrontendVirtioBlkServiceClient) EXPECT() *FrontendVirtioBlkServiceClient_Expecter {
	return &FrontendVirtioBlkServiceClient_Expecter{mock: &_m.Mock}
}

// CreateVirtioBlk provides a mock function with given fields: ctx, in, opts
func (_m *FrontendVirtioBlkServiceClient) CreateVirtioBlk(ctx context.Context, in *_go.CreateVirtioBlkRequest, opts ...grpc.CallOption) (*_go.VirtioBlk, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *_go.VirtioBlk
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *_go.CreateVirtioBlkRequest, ...grpc.CallOption) (*_go.VirtioBlk, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *_go.CreateVirtioBlkRequest, ...grpc.CallOption) *_go.VirtioBlk); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*_go.VirtioBlk)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *_go.CreateVirtioBlkRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FrontendVirtioBlkServiceClient_CreateVirtioBlk_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateVirtioBlk'
type FrontendVirtioBlkServiceClient_CreateVirtioBlk_Call struct {
	*mock.Call
}

// CreateVirtioBlk is a helper method to define mock.On call
//   - ctx context.Context
//   - in *_go.CreateVirtioBlkRequest
//   - opts ...grpc.CallOption
func (_e *FrontendVirtioBlkServiceClient_Expecter) CreateVirtioBlk(ctx interface{}, in interface{}, opts ...interface{}) *FrontendVirtioBlkServiceClient_CreateVirtioBlk_Call {
	return &FrontendVirtioBlkServiceClient_CreateVirtioBlk_Call{Call: _e.mock.On("CreateVirtioBlk",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *FrontendVirtioBlkServiceClient_CreateVirtioBlk_Call) Run(run func(ctx context.Context, in *_go.CreateVirtioBlkRequest, opts ...grpc.CallOption)) *FrontendVirtioBlkServiceClient_CreateVirtioBlk_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*_go.CreateVirtioBlkRequest), variadicArgs...)
	})
	return _c
}

func (_c *FrontendVirtioBlkServiceClient_CreateVirtioBlk_Call) Return(_a0 *_go.VirtioBlk, _a1 error) *FrontendVirtioBlkServiceClient_CreateVirtioBlk_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FrontendVirtioBlkServiceClient_CreateVirtioBlk_Call) RunAndReturn(run func(context.Context, *_go.CreateVirtioBlkRequest, ...grpc.CallOption) (*_go.VirtioBlk, error)) *FrontendVirtioBlkServiceClient_CreateVirtioBlk_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteVirtioBlk provides a mock function with given fields: ctx, in, opts
func (_m *FrontendVirtioBlkServiceClient) DeleteVirtioBlk(ctx context.Context, in *_go.DeleteVirtioBlkRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *emptypb.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *_go.DeleteVirtioBlkRequest, ...grpc.CallOption) (*emptypb.Empty, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *_go.DeleteVirtioBlkRequest, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *_go.DeleteVirtioBlkRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FrontendVirtioBlkServiceClient_DeleteVirtioBlk_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteVirtioBlk'
type FrontendVirtioBlkServiceClient_DeleteVirtioBlk_Call struct {
	*mock.Call
}

// DeleteVirtioBlk is a helper method to define mock.On call
//   - ctx context.Context
//   - in *_go.DeleteVirtioBlkRequest
//   - opts ...grpc.CallOption
func (_e *FrontendVirtioBlkServiceClient_Expecter) DeleteVirtioBlk(ctx interface{}, in interface{}, opts ...interface{}) *FrontendVirtioBlkServiceClient_DeleteVirtioBlk_Call {
	return &FrontendVirtioBlkServiceClient_DeleteVirtioBlk_Call{Call: _e.mock.On("DeleteVirtioBlk",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *FrontendVirtioBlkServiceClient_DeleteVirtioBlk_Call) Run(run func(ctx context.Context, in *_go.DeleteVirtioBlkRequest, opts ...grpc.CallOption)) *FrontendVirtioBlkServiceClient_DeleteVirtioBlk_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*_go.DeleteVirtioBlkRequest), variadicArgs...)
	})
	return _c
}

func (_c *FrontendVirtioBlkServiceClient_DeleteVirtioBlk_Call) Return(_a0 *emptypb.Empty, _a1 error) *FrontendVirtioBlkServiceClient_DeleteVirtioBlk_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FrontendVirtioBlkServiceClient_DeleteVirtioBlk_Call) RunAndReturn(run func(context.Context, *_go.DeleteVirtioBlkRequest, ...grpc.CallOption) (*emptypb.Empty, error)) *FrontendVirtioBlkServiceClient_DeleteVirtioBlk_Call {
	_c.Call.Return(run)
	return _c
}

// GetVirtioBlk provides a mock function with given fields: ctx, in, opts
func (_m *FrontendVirtioBlkServiceClient) GetVirtioBlk(ctx context.Context, in *_go.GetVirtioBlkRequest, opts ...grpc.CallOption) (*_go.VirtioBlk, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *_go.VirtioBlk
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *_go.GetVirtioBlkRequest, ...grpc.CallOption) (*_go.VirtioBlk, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *_go.GetVirtioBlkRequest, ...grpc.CallOption) *_go.VirtioBlk); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*_go.VirtioBlk)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *_go.GetVirtioBlkRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FrontendVirtioBlkServiceClient_GetVirtioBlk_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVirtioBlk'
type FrontendVirtioBlkServiceClient_GetVirtioBlk_Call struct {
	*mock.Call
}

// GetVirtioBlk is a helper method to define mock.On call
//   - ctx context.Context
//   - in *_go.GetVirtioBlkRequest
//   - opts ...grpc.CallOption
func (_e *FrontendVirtioBlkServiceClient_Expecter) GetVirtioBlk(ctx interface{}, in interface{}, opts ...interface{}) *FrontendVirtioBlkServiceClient_GetVirtioBlk_Call {
	return &FrontendVirtioBlkServiceClient_GetVirtioBlk_Call{Call: _e.mock.On("GetVirtioBlk",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *FrontendVirtioBlkServiceClient_GetVirtioBlk_Call) Run(run func(ctx context.Context, in *_go.GetVirtioBlkRequest, opts ...grpc.CallOption)) *FrontendVirtioBlkServiceClient_GetVirtioBlk_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*_go.GetVirtioBlkRequest), variadicArgs...)
	})
	return _c
}

func (_c *FrontendVirtioBlkServiceClient_GetVirtioBlk_Call) Return(_a0 *_go.VirtioBlk, _a1 error) *FrontendVirtioBlkServiceClient_GetVirtioBlk_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FrontendVirtioBlkServiceClient_GetVirtioBlk_Call) RunAndReturn(run func(context.Context, *_go.GetVirtioBlkRequest, ...grpc.CallOption) (*_go.VirtioBlk, error)) *FrontendVirtioBlkServiceClient_GetVirtioBlk_Call {
	_c.Call.Return(run)
	return _c
}

// ListVirtioBlks provides a mock function with given fields: ctx, in, opts
func (_m *FrontendVirtioBlkServiceClient) ListVirtioBlks(ctx context.Context, in *_go.ListVirtioBlksRequest, opts ...grpc.CallOption) (*_go.ListVirtioBlksResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *_go.ListVirtioBlksResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *_go.ListVirtioBlksRequest, ...grpc.CallOption) (*_go.ListVirtioBlksResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *_go.ListVirtioBlksRequest, ...grpc.CallOption) *_go.ListVirtioBlksResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*_go.ListVirtioBlksResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *_go.ListVirtioBlksRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FrontendVirtioBlkServiceClient_ListVirtioBlks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListVirtioBlks'
type FrontendVirtioBlkServiceClient_ListVirtioBlks_Call struct {
	*mock.Call
}

// ListVirtioBlks is a helper method to define mock.On call
//   - ctx context.Context
//   - in *_go.ListVirtioBlksRequest
//   - opts ...grpc.CallOption
func (_e *FrontendVirtioBlkServiceClient_Expecter) ListVirtioBlks(ctx interface{}, in interface{}, opts ...interface{}) *FrontendVirtioBlkServiceClient_ListVirtioBlks_Call {
	return &FrontendVirtioBlkServiceClient_ListVirtioBlks_Call{Call: _e.mock.On("ListVirtioBlks",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *FrontendVirtioBlkServiceClient_ListVirtioBlks_Call) Run(run func(ctx context.Context, in *_go.ListVirtioBlksRequest, opts ...grpc.CallOption)) *FrontendVirtioBlkServiceClient_ListVirtioBlks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*_go.ListVirtioBlksRequest), variadicArgs...)
	})
	return _c
}

func (_c *FrontendVirtioBlkServiceClient_ListVirtioBlks_Call) Return(_a0 *_go.ListVirtioBlksResponse, _a1 error) *FrontendVirtioBlkServiceClient_ListVirtioBlks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FrontendVirtioBlkServiceClient_ListVirtioBlks_Call) RunAndReturn(run func(context.Context, *_go.ListVirtioBlksRequest, ...grpc.CallOption) (*_go.ListVirtioBlksResponse, error)) *FrontendVirtioBlkServiceClient_ListVirtioBlks_Call {
	_c.Call.Return(run)
	return _c
}

// StatsVirtioBlk provides a mock function with given fields: ctx, in, opts
func (_m *FrontendVirtioBlkServiceClient) StatsVirtioBlk(ctx context.Context, in *_go.StatsVirtioBlkRequest, opts ...grpc.CallOption) (*_go.StatsVirtioBlkResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *_go.StatsVirtioBlkResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *_go.StatsVirtioBlkRequest, ...grpc.CallOption) (*_go.StatsVirtioBlkResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *_go.StatsVirtioBlkRequest, ...grpc.CallOption) *_go.StatsVirtioBlkResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*_go.StatsVirtioBlkResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *_go.StatsVirtioBlkRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FrontendVirtioBlkServiceClient_StatsVirtioBlk_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StatsVirtioBlk'
type FrontendVirtioBlkServiceClient_StatsVirtioBlk_Call struct {
	*mock.Call
}

// StatsVirtioBlk is a helper method to define mock.On call
//   - ctx context.Context
//   - in *_go.StatsVirtioBlkRequest
//   - opts ...grpc.CallOption
func (_e *FrontendVirtioBlkServiceClient_Expecter) StatsVirtioBlk(ctx interface{}, in interface{}, opts ...interface{}) *FrontendVirtioBlkServiceClient_StatsVirtioBlk_Call {
	return &FrontendVirtioBlkServiceClient_StatsVirtioBlk_Call{Call: _e.mock.On("StatsVirtioBlk",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *FrontendVirtioBlkServiceClient_StatsVirtioBlk_Call) Run(run func(ctx context.Context, in *_go.StatsVirtioBlkRequest, opts ...grpc.CallOption)) *FrontendVirtioBlkServiceClient_StatsVirtioBlk_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*_go.StatsVirtioBlkRequest), variadicArgs...)
	})
	return _c
}

func (_c *FrontendVirtioBlkServiceClient_StatsVirtioBlk_Call) Return(_a0 *_go.StatsVirtioBlkResponse, _a1 error) *FrontendVirtioBlkServiceClient_StatsVirtioBlk_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FrontendVirtioBlkServiceClient_StatsVirtioBlk_Call) RunAndReturn(run func(context.Context, *_go.StatsVirtioBlkRequest, ...grpc.CallOption) (*_go.StatsVirtioBlkResponse, error)) *FrontendVirtioBlkServiceClient_StatsVirtioBlk_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateVirtioBlk provides a mock function with given fields: ctx, in, opts
func (_m *FrontendVirtioBlkServiceClient) UpdateVirtioBlk(ctx context.Context, in *_go.UpdateVirtioBlkRequest, opts ...grpc.CallOption) (*_go.VirtioBlk, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *_go.VirtioBlk
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *_go.UpdateVirtioBlkRequest, ...grpc.CallOption) (*_go.VirtioBlk, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *_go.UpdateVirtioBlkRequest, ...grpc.CallOption) *_go.VirtioBlk); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*_go.VirtioBlk)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *_go.UpdateVirtioBlkRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FrontendVirtioBlkServiceClient_UpdateVirtioBlk_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateVirtioBlk'
type FrontendVirtioBlkServiceClient_UpdateVirtioBlk_Call struct {
	*mock.Call
}

// UpdateVirtioBlk is a helper method to define mock.On call
//   - ctx context.Context
//   - in *_go.UpdateVirtioBlkRequest
//   - opts ...grpc.CallOption
func (_e *FrontendVirtioBlkServiceClient_Expecter) UpdateVirtioBlk(ctx interface{}, in interface{}, opts ...interface{}) *FrontendVirtioBlkServiceClient_UpdateVirtioBlk_Call {
	return &FrontendVirtioBlkServiceClient_UpdateVirtioBlk_Call{Call: _e.mock.On("UpdateVirtioBlk",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *FrontendVirtioBlkServiceClient_UpdateVirtioBlk_Call) Run(run func(ctx context.Context, in *_go.UpdateVirtioBlkRequest, opts ...grpc.CallOption)) *FrontendVirtioBlkServiceClient_UpdateVirtioBlk_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*_go.UpdateVirtioBlkRequest), variadicArgs...)
	})
	return _c
}

func (_c *FrontendVirtioBlkServiceClient_UpdateVirtioBlk_Call) Return(_a0 *_go.VirtioBlk, _a1 error) *FrontendVirtioBlkServiceClient_UpdateVirtioBlk_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FrontendVirtioBlkServiceClient_UpdateVirtioBlk_Call) RunAndReturn(run func(context.Context, *_go.UpdateVirtioBlkRequest, ...grpc.CallOption) (*_go.VirtioBlk, error)) *FrontendVirtioBlkServiceClient_UpdateVirtioBlk_Call {
	_c.Call.Return(run)
	return _c
}

// NewFrontendVirtioBlkServiceClient creates a new instance of FrontendVirtioBlkServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFrontendVirtioBlkServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *FrontendVirtioBlkServiceClient {
	mock := &FrontendVirtioBlkServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
