/* SPDX-License-Identifier: Apache-2.0
   Copyright (c) 2023 Dell Inc, or its subsidiaries.
*/
// Code generated by mockery v2.33.1. DO NOT EDIT.

package mocks

import (
	context "context"

	_go "github.com/opiproject/opi-api/storage/v1alpha1/gen/go"

	emptypb "google.golang.org/protobuf/types/known/emptypb"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// AioVolumeServiceClient is an autogenerated mock type for the AioVolumeServiceClient type
type AioVolumeServiceClient struct {
	mock.Mock
}

type AioVolumeServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *AioVolumeServiceClient) EXPECT() *AioVolumeServiceClient_Expecter {
	return &AioVolumeServiceClient_Expecter{mock: &_m.Mock}
}

// CreateAioVolume provides a mock function with given fields: ctx, in, opts
func (_m *AioVolumeServiceClient) CreateAioVolume(ctx context.Context, in *_go.CreateAioVolumeRequest, opts ...grpc.CallOption) (*_go.AioVolume, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *_go.AioVolume
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *_go.CreateAioVolumeRequest, ...grpc.CallOption) (*_go.AioVolume, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *_go.CreateAioVolumeRequest, ...grpc.CallOption) *_go.AioVolume); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*_go.AioVolume)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *_go.CreateAioVolumeRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AioVolumeServiceClient_CreateAioVolume_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAioVolume'
type AioVolumeServiceClient_CreateAioVolume_Call struct {
	*mock.Call
}

// CreateAioVolume is a helper method to define mock.On call
//   - ctx context.Context
//   - in *_go.CreateAioVolumeRequest
//   - opts ...grpc.CallOption
func (_e *AioVolumeServiceClient_Expecter) CreateAioVolume(ctx interface{}, in interface{}, opts ...interface{}) *AioVolumeServiceClient_CreateAioVolume_Call {
	return &AioVolumeServiceClient_CreateAioVolume_Call{Call: _e.mock.On("CreateAioVolume",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AioVolumeServiceClient_CreateAioVolume_Call) Run(run func(ctx context.Context, in *_go.CreateAioVolumeRequest, opts ...grpc.CallOption)) *AioVolumeServiceClient_CreateAioVolume_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*_go.CreateAioVolumeRequest), variadicArgs...)
	})
	return _c
}

func (_c *AioVolumeServiceClient_CreateAioVolume_Call) Return(_a0 *_go.AioVolume, _a1 error) *AioVolumeServiceClient_CreateAioVolume_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AioVolumeServiceClient_CreateAioVolume_Call) RunAndReturn(run func(context.Context, *_go.CreateAioVolumeRequest, ...grpc.CallOption) (*_go.AioVolume, error)) *AioVolumeServiceClient_CreateAioVolume_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAioVolume provides a mock function with given fields: ctx, in, opts
func (_m *AioVolumeServiceClient) DeleteAioVolume(ctx context.Context, in *_go.DeleteAioVolumeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *emptypb.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *_go.DeleteAioVolumeRequest, ...grpc.CallOption) (*emptypb.Empty, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *_go.DeleteAioVolumeRequest, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *_go.DeleteAioVolumeRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AioVolumeServiceClient_DeleteAioVolume_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAioVolume'
type AioVolumeServiceClient_DeleteAioVolume_Call struct {
	*mock.Call
}

// DeleteAioVolume is a helper method to define mock.On call
//   - ctx context.Context
//   - in *_go.DeleteAioVolumeRequest
//   - opts ...grpc.CallOption
func (_e *AioVolumeServiceClient_Expecter) DeleteAioVolume(ctx interface{}, in interface{}, opts ...interface{}) *AioVolumeServiceClient_DeleteAioVolume_Call {
	return &AioVolumeServiceClient_DeleteAioVolume_Call{Call: _e.mock.On("DeleteAioVolume",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AioVolumeServiceClient_DeleteAioVolume_Call) Run(run func(ctx context.Context, in *_go.DeleteAioVolumeRequest, opts ...grpc.CallOption)) *AioVolumeServiceClient_DeleteAioVolume_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*_go.DeleteAioVolumeRequest), variadicArgs...)
	})
	return _c
}

func (_c *AioVolumeServiceClient_DeleteAioVolume_Call) Return(_a0 *emptypb.Empty, _a1 error) *AioVolumeServiceClient_DeleteAioVolume_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AioVolumeServiceClient_DeleteAioVolume_Call) RunAndReturn(run func(context.Context, *_go.DeleteAioVolumeRequest, ...grpc.CallOption) (*emptypb.Empty, error)) *AioVolumeServiceClient_DeleteAioVolume_Call {
	_c.Call.Return(run)
	return _c
}

// GetAioVolume provides a mock function with given fields: ctx, in, opts
func (_m *AioVolumeServiceClient) GetAioVolume(ctx context.Context, in *_go.GetAioVolumeRequest, opts ...grpc.CallOption) (*_go.AioVolume, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *_go.AioVolume
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *_go.GetAioVolumeRequest, ...grpc.CallOption) (*_go.AioVolume, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *_go.GetAioVolumeRequest, ...grpc.CallOption) *_go.AioVolume); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*_go.AioVolume)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *_go.GetAioVolumeRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AioVolumeServiceClient_GetAioVolume_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAioVolume'
type AioVolumeServiceClient_GetAioVolume_Call struct {
	*mock.Call
}

// GetAioVolume is a helper method to define mock.On call
//   - ctx context.Context
//   - in *_go.GetAioVolumeRequest
//   - opts ...grpc.CallOption
func (_e *AioVolumeServiceClient_Expecter) GetAioVolume(ctx interface{}, in interface{}, opts ...interface{}) *AioVolumeServiceClient_GetAioVolume_Call {
	return &AioVolumeServiceClient_GetAioVolume_Call{Call: _e.mock.On("GetAioVolume",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AioVolumeServiceClient_GetAioVolume_Call) Run(run func(ctx context.Context, in *_go.GetAioVolumeRequest, opts ...grpc.CallOption)) *AioVolumeServiceClient_GetAioVolume_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*_go.GetAioVolumeRequest), variadicArgs...)
	})
	return _c
}

func (_c *AioVolumeServiceClient_GetAioVolume_Call) Return(_a0 *_go.AioVolume, _a1 error) *AioVolumeServiceClient_GetAioVolume_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AioVolumeServiceClient_GetAioVolume_Call) RunAndReturn(run func(context.Context, *_go.GetAioVolumeRequest, ...grpc.CallOption) (*_go.AioVolume, error)) *AioVolumeServiceClient_GetAioVolume_Call {
	_c.Call.Return(run)
	return _c
}

// ListAioVolumes provides a mock function with given fields: ctx, in, opts
func (_m *AioVolumeServiceClient) ListAioVolumes(ctx context.Context, in *_go.ListAioVolumesRequest, opts ...grpc.CallOption) (*_go.ListAioVolumesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *_go.ListAioVolumesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *_go.ListAioVolumesRequest, ...grpc.CallOption) (*_go.ListAioVolumesResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *_go.ListAioVolumesRequest, ...grpc.CallOption) *_go.ListAioVolumesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*_go.ListAioVolumesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *_go.ListAioVolumesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AioVolumeServiceClient_ListAioVolumes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAioVolumes'
type AioVolumeServiceClient_ListAioVolumes_Call struct {
	*mock.Call
}

// ListAioVolumes is a helper method to define mock.On call
//   - ctx context.Context
//   - in *_go.ListAioVolumesRequest
//   - opts ...grpc.CallOption
func (_e *AioVolumeServiceClient_Expecter) ListAioVolumes(ctx interface{}, in interface{}, opts ...interface{}) *AioVolumeServiceClient_ListAioVolumes_Call {
	return &AioVolumeServiceClient_ListAioVolumes_Call{Call: _e.mock.On("ListAioVolumes",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AioVolumeServiceClient_ListAioVolumes_Call) Run(run func(ctx context.Context, in *_go.ListAioVolumesRequest, opts ...grpc.CallOption)) *AioVolumeServiceClient_ListAioVolumes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*_go.ListAioVolumesRequest), variadicArgs...)
	})
	return _c
}

func (_c *AioVolumeServiceClient_ListAioVolumes_Call) Return(_a0 *_go.ListAioVolumesResponse, _a1 error) *AioVolumeServiceClient_ListAioVolumes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AioVolumeServiceClient_ListAioVolumes_Call) RunAndReturn(run func(context.Context, *_go.ListAioVolumesRequest, ...grpc.CallOption) (*_go.ListAioVolumesResponse, error)) *AioVolumeServiceClient_ListAioVolumes_Call {
	_c.Call.Return(run)
	return _c
}

// StatsAioVolume provides a mock function with given fields: ctx, in, opts
func (_m *AioVolumeServiceClient) StatsAioVolume(ctx context.Context, in *_go.StatsAioVolumeRequest, opts ...grpc.CallOption) (*_go.StatsAioVolumeResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *_go.StatsAioVolumeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *_go.StatsAioVolumeRequest, ...grpc.CallOption) (*_go.StatsAioVolumeResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *_go.StatsAioVolumeRequest, ...grpc.CallOption) *_go.StatsAioVolumeResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*_go.StatsAioVolumeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *_go.StatsAioVolumeRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AioVolumeServiceClient_StatsAioVolume_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StatsAioVolume'
type AioVolumeServiceClient_StatsAioVolume_Call struct {
	*mock.Call
}

// StatsAioVolume is a helper method to define mock.On call
//   - ctx context.Context
//   - in *_go.StatsAioVolumeRequest
//   - opts ...grpc.CallOption
func (_e *AioVolumeServiceClient_Expecter) StatsAioVolume(ctx interface{}, in interface{}, opts ...interface{}) *AioVolumeServiceClient_StatsAioVolume_Call {
	return &AioVolumeServiceClient_StatsAioVolume_Call{Call: _e.mock.On("StatsAioVolume",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AioVolumeServiceClient_StatsAioVolume_Call) Run(run func(ctx context.Context, in *_go.StatsAioVolumeRequest, opts ...grpc.CallOption)) *AioVolumeServiceClient_StatsAioVolume_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*_go.StatsAioVolumeRequest), variadicArgs...)
	})
	return _c
}

func (_c *AioVolumeServiceClient_StatsAioVolume_Call) Return(_a0 *_go.StatsAioVolumeResponse, _a1 error) *AioVolumeServiceClient_StatsAioVolume_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AioVolumeServiceClient_StatsAioVolume_Call) RunAndReturn(run func(context.Context, *_go.StatsAioVolumeRequest, ...grpc.CallOption) (*_go.StatsAioVolumeResponse, error)) *AioVolumeServiceClient_StatsAioVolume_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAioVolume provides a mock function with given fields: ctx, in, opts
func (_m *AioVolumeServiceClient) UpdateAioVolume(ctx context.Context, in *_go.UpdateAioVolumeRequest, opts ...grpc.CallOption) (*_go.AioVolume, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *_go.AioVolume
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *_go.UpdateAioVolumeRequest, ...grpc.CallOption) (*_go.AioVolume, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *_go.UpdateAioVolumeRequest, ...grpc.CallOption) *_go.AioVolume); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*_go.AioVolume)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *_go.UpdateAioVolumeRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AioVolumeServiceClient_UpdateAioVolume_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAioVolume'
type AioVolumeServiceClient_UpdateAioVolume_Call struct {
	*mock.Call
}

// UpdateAioVolume is a helper method to define mock.On call
//   - ctx context.Context
//   - in *_go.UpdateAioVolumeRequest
//   - opts ...grpc.CallOption
func (_e *AioVolumeServiceClient_Expecter) UpdateAioVolume(ctx interface{}, in interface{}, opts ...interface{}) *AioVolumeServiceClient_UpdateAioVolume_Call {
	return &AioVolumeServiceClient_UpdateAioVolume_Call{Call: _e.mock.On("UpdateAioVolume",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AioVolumeServiceClient_UpdateAioVolume_Call) Run(run func(ctx context.Context, in *_go.UpdateAioVolumeRequest, opts ...grpc.CallOption)) *AioVolumeServiceClient_UpdateAioVolume_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*_go.UpdateAioVolumeRequest), variadicArgs...)
	})
	return _c
}

func (_c *AioVolumeServiceClient_UpdateAioVolume_Call) Return(_a0 *_go.AioVolume, _a1 error) *AioVolumeServiceClient_UpdateAioVolume_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AioVolumeServiceClient_UpdateAioVolume_Call) RunAndReturn(run func(context.Context, *_go.UpdateAioVolumeRequest, ...grpc.CallOption) (*_go.AioVolume, error)) *AioVolumeServiceClient_UpdateAioVolume_Call {
	_c.Call.Return(run)
	return _c
}

// NewAioVolumeServiceClient creates a new instance of AioVolumeServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAioVolumeServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *AioVolumeServiceClient {
	mock := &AioVolumeServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
