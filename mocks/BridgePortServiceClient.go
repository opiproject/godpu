/* SPDX-License-Identifier: Apache-2.0
   Copyright (c) 2023 Dell Inc, or its subsidiaries.
*/
// Code generated by mockery v2.33.1. DO NOT EDIT.

package mocks

import (
	context "context"

	_go "github.com/opiproject/opi-api/network/evpn-gw/v1alpha1/gen/go"

	emptypb "google.golang.org/protobuf/types/known/emptypb"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// BridgePortServiceClient is an autogenerated mock type for the BridgePortServiceClient type
type BridgePortServiceClient struct {
	mock.Mock
}

type BridgePortServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *BridgePortServiceClient) EXPECT() *BridgePortServiceClient_Expecter {
	return &BridgePortServiceClient_Expecter{mock: &_m.Mock}
}

// CreateBridgePort provides a mock function with given fields: ctx, in, opts
func (_m *BridgePortServiceClient) CreateBridgePort(ctx context.Context, in *_go.CreateBridgePortRequest, opts ...grpc.CallOption) (*_go.BridgePort, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *_go.BridgePort
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *_go.CreateBridgePortRequest, ...grpc.CallOption) (*_go.BridgePort, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *_go.CreateBridgePortRequest, ...grpc.CallOption) *_go.BridgePort); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*_go.BridgePort)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *_go.CreateBridgePortRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BridgePortServiceClient_CreateBridgePort_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBridgePort'
type BridgePortServiceClient_CreateBridgePort_Call struct {
	*mock.Call
}

// CreateBridgePort is a helper method to define mock.On call
//   - ctx context.Context
//   - in *_go.CreateBridgePortRequest
//   - opts ...grpc.CallOption
func (_e *BridgePortServiceClient_Expecter) CreateBridgePort(ctx interface{}, in interface{}, opts ...interface{}) *BridgePortServiceClient_CreateBridgePort_Call {
	return &BridgePortServiceClient_CreateBridgePort_Call{Call: _e.mock.On("CreateBridgePort",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *BridgePortServiceClient_CreateBridgePort_Call) Run(run func(ctx context.Context, in *_go.CreateBridgePortRequest, opts ...grpc.CallOption)) *BridgePortServiceClient_CreateBridgePort_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*_go.CreateBridgePortRequest), variadicArgs...)
	})
	return _c
}

func (_c *BridgePortServiceClient_CreateBridgePort_Call) Return(_a0 *_go.BridgePort, _a1 error) *BridgePortServiceClient_CreateBridgePort_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BridgePortServiceClient_CreateBridgePort_Call) RunAndReturn(run func(context.Context, *_go.CreateBridgePortRequest, ...grpc.CallOption) (*_go.BridgePort, error)) *BridgePortServiceClient_CreateBridgePort_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteBridgePort provides a mock function with given fields: ctx, in, opts
func (_m *BridgePortServiceClient) DeleteBridgePort(ctx context.Context, in *_go.DeleteBridgePortRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *emptypb.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *_go.DeleteBridgePortRequest, ...grpc.CallOption) (*emptypb.Empty, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *_go.DeleteBridgePortRequest, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *_go.DeleteBridgePortRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BridgePortServiceClient_DeleteBridgePort_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteBridgePort'
type BridgePortServiceClient_DeleteBridgePort_Call struct {
	*mock.Call
}

// DeleteBridgePort is a helper method to define mock.On call
//   - ctx context.Context
//   - in *_go.DeleteBridgePortRequest
//   - opts ...grpc.CallOption
func (_e *BridgePortServiceClient_Expecter) DeleteBridgePort(ctx interface{}, in interface{}, opts ...interface{}) *BridgePortServiceClient_DeleteBridgePort_Call {
	return &BridgePortServiceClient_DeleteBridgePort_Call{Call: _e.mock.On("DeleteBridgePort",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *BridgePortServiceClient_DeleteBridgePort_Call) Run(run func(ctx context.Context, in *_go.DeleteBridgePortRequest, opts ...grpc.CallOption)) *BridgePortServiceClient_DeleteBridgePort_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*_go.DeleteBridgePortRequest), variadicArgs...)
	})
	return _c
}

func (_c *BridgePortServiceClient_DeleteBridgePort_Call) Return(_a0 *emptypb.Empty, _a1 error) *BridgePortServiceClient_DeleteBridgePort_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BridgePortServiceClient_DeleteBridgePort_Call) RunAndReturn(run func(context.Context, *_go.DeleteBridgePortRequest, ...grpc.CallOption) (*emptypb.Empty, error)) *BridgePortServiceClient_DeleteBridgePort_Call {
	_c.Call.Return(run)
	return _c
}

// GetBridgePort provides a mock function with given fields: ctx, in, opts
func (_m *BridgePortServiceClient) GetBridgePort(ctx context.Context, in *_go.GetBridgePortRequest, opts ...grpc.CallOption) (*_go.BridgePort, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *_go.BridgePort
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *_go.GetBridgePortRequest, ...grpc.CallOption) (*_go.BridgePort, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *_go.GetBridgePortRequest, ...grpc.CallOption) *_go.BridgePort); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*_go.BridgePort)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *_go.GetBridgePortRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BridgePortServiceClient_GetBridgePort_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBridgePort'
type BridgePortServiceClient_GetBridgePort_Call struct {
	*mock.Call
}

// GetBridgePort is a helper method to define mock.On call
//   - ctx context.Context
//   - in *_go.GetBridgePortRequest
//   - opts ...grpc.CallOption
func (_e *BridgePortServiceClient_Expecter) GetBridgePort(ctx interface{}, in interface{}, opts ...interface{}) *BridgePortServiceClient_GetBridgePort_Call {
	return &BridgePortServiceClient_GetBridgePort_Call{Call: _e.mock.On("GetBridgePort",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *BridgePortServiceClient_GetBridgePort_Call) Run(run func(ctx context.Context, in *_go.GetBridgePortRequest, opts ...grpc.CallOption)) *BridgePortServiceClient_GetBridgePort_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*_go.GetBridgePortRequest), variadicArgs...)
	})
	return _c
}

func (_c *BridgePortServiceClient_GetBridgePort_Call) Return(_a0 *_go.BridgePort, _a1 error) *BridgePortServiceClient_GetBridgePort_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BridgePortServiceClient_GetBridgePort_Call) RunAndReturn(run func(context.Context, *_go.GetBridgePortRequest, ...grpc.CallOption) (*_go.BridgePort, error)) *BridgePortServiceClient_GetBridgePort_Call {
	_c.Call.Return(run)
	return _c
}

// ListBridgePorts provides a mock function with given fields: ctx, in, opts
func (_m *BridgePortServiceClient) ListBridgePorts(ctx context.Context, in *_go.ListBridgePortsRequest, opts ...grpc.CallOption) (*_go.ListBridgePortsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *_go.ListBridgePortsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *_go.ListBridgePortsRequest, ...grpc.CallOption) (*_go.ListBridgePortsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *_go.ListBridgePortsRequest, ...grpc.CallOption) *_go.ListBridgePortsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*_go.ListBridgePortsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *_go.ListBridgePortsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BridgePortServiceClient_ListBridgePorts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListBridgePorts'
type BridgePortServiceClient_ListBridgePorts_Call struct {
	*mock.Call
}

// ListBridgePorts is a helper method to define mock.On call
//   - ctx context.Context
//   - in *_go.ListBridgePortsRequest
//   - opts ...grpc.CallOption
func (_e *BridgePortServiceClient_Expecter) ListBridgePorts(ctx interface{}, in interface{}, opts ...interface{}) *BridgePortServiceClient_ListBridgePorts_Call {
	return &BridgePortServiceClient_ListBridgePorts_Call{Call: _e.mock.On("ListBridgePorts",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *BridgePortServiceClient_ListBridgePorts_Call) Run(run func(ctx context.Context, in *_go.ListBridgePortsRequest, opts ...grpc.CallOption)) *BridgePortServiceClient_ListBridgePorts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*_go.ListBridgePortsRequest), variadicArgs...)
	})
	return _c
}

func (_c *BridgePortServiceClient_ListBridgePorts_Call) Return(_a0 *_go.ListBridgePortsResponse, _a1 error) *BridgePortServiceClient_ListBridgePorts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BridgePortServiceClient_ListBridgePorts_Call) RunAndReturn(run func(context.Context, *_go.ListBridgePortsRequest, ...grpc.CallOption) (*_go.ListBridgePortsResponse, error)) *BridgePortServiceClient_ListBridgePorts_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateBridgePort provides a mock function with given fields: ctx, in, opts
func (_m *BridgePortServiceClient) UpdateBridgePort(ctx context.Context, in *_go.UpdateBridgePortRequest, opts ...grpc.CallOption) (*_go.BridgePort, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *_go.BridgePort
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *_go.UpdateBridgePortRequest, ...grpc.CallOption) (*_go.BridgePort, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *_go.UpdateBridgePortRequest, ...grpc.CallOption) *_go.BridgePort); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*_go.BridgePort)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *_go.UpdateBridgePortRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BridgePortServiceClient_UpdateBridgePort_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateBridgePort'
type BridgePortServiceClient_UpdateBridgePort_Call struct {
	*mock.Call
}

// UpdateBridgePort is a helper method to define mock.On call
//   - ctx context.Context
//   - in *_go.UpdateBridgePortRequest
//   - opts ...grpc.CallOption
func (_e *BridgePortServiceClient_Expecter) UpdateBridgePort(ctx interface{}, in interface{}, opts ...interface{}) *BridgePortServiceClient_UpdateBridgePort_Call {
	return &BridgePortServiceClient_UpdateBridgePort_Call{Call: _e.mock.On("UpdateBridgePort",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *BridgePortServiceClient_UpdateBridgePort_Call) Run(run func(ctx context.Context, in *_go.UpdateBridgePortRequest, opts ...grpc.CallOption)) *BridgePortServiceClient_UpdateBridgePort_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*_go.UpdateBridgePortRequest), variadicArgs...)
	})
	return _c
}

func (_c *BridgePortServiceClient_UpdateBridgePort_Call) Return(_a0 *_go.BridgePort, _a1 error) *BridgePortServiceClient_UpdateBridgePort_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BridgePortServiceClient_UpdateBridgePort_Call) RunAndReturn(run func(context.Context, *_go.UpdateBridgePortRequest, ...grpc.CallOption) (*_go.BridgePort, error)) *BridgePortServiceClient_UpdateBridgePort_Call {
	_c.Call.Return(run)
	return _c
}

// NewBridgePortServiceClient creates a new instance of BridgePortServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBridgePortServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *BridgePortServiceClient {
	mock := &BridgePortServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
