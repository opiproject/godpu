/* SPDX-License-Identifier: Apache-2.0
   Copyright (c) 2023 Dell Inc, or its subsidiaries.
*/
// Code generated by mockery v2.33.1. DO NOT EDIT.

package mocks

import (
	context "context"

	_go "github.com/opiproject/opi-api/storage/v1alpha1/gen/go"

	emptypb "google.golang.org/protobuf/types/known/emptypb"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// MiddleendEncryptionServiceClient is an autogenerated mock type for the MiddleendEncryptionServiceClient type
type MiddleendEncryptionServiceClient struct {
	mock.Mock
}

type MiddleendEncryptionServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MiddleendEncryptionServiceClient) EXPECT() *MiddleendEncryptionServiceClient_Expecter {
	return &MiddleendEncryptionServiceClient_Expecter{mock: &_m.Mock}
}

// CreateEncryptedVolume provides a mock function with given fields: ctx, in, opts
func (_m *MiddleendEncryptionServiceClient) CreateEncryptedVolume(ctx context.Context, in *_go.CreateEncryptedVolumeRequest, opts ...grpc.CallOption) (*_go.EncryptedVolume, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *_go.EncryptedVolume
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *_go.CreateEncryptedVolumeRequest, ...grpc.CallOption) (*_go.EncryptedVolume, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *_go.CreateEncryptedVolumeRequest, ...grpc.CallOption) *_go.EncryptedVolume); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*_go.EncryptedVolume)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *_go.CreateEncryptedVolumeRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MiddleendEncryptionServiceClient_CreateEncryptedVolume_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateEncryptedVolume'
type MiddleendEncryptionServiceClient_CreateEncryptedVolume_Call struct {
	*mock.Call
}

// CreateEncryptedVolume is a helper method to define mock.On call
//   - ctx context.Context
//   - in *_go.CreateEncryptedVolumeRequest
//   - opts ...grpc.CallOption
func (_e *MiddleendEncryptionServiceClient_Expecter) CreateEncryptedVolume(ctx interface{}, in interface{}, opts ...interface{}) *MiddleendEncryptionServiceClient_CreateEncryptedVolume_Call {
	return &MiddleendEncryptionServiceClient_CreateEncryptedVolume_Call{Call: _e.mock.On("CreateEncryptedVolume",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MiddleendEncryptionServiceClient_CreateEncryptedVolume_Call) Run(run func(ctx context.Context, in *_go.CreateEncryptedVolumeRequest, opts ...grpc.CallOption)) *MiddleendEncryptionServiceClient_CreateEncryptedVolume_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*_go.CreateEncryptedVolumeRequest), variadicArgs...)
	})
	return _c
}

func (_c *MiddleendEncryptionServiceClient_CreateEncryptedVolume_Call) Return(_a0 *_go.EncryptedVolume, _a1 error) *MiddleendEncryptionServiceClient_CreateEncryptedVolume_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MiddleendEncryptionServiceClient_CreateEncryptedVolume_Call) RunAndReturn(run func(context.Context, *_go.CreateEncryptedVolumeRequest, ...grpc.CallOption) (*_go.EncryptedVolume, error)) *MiddleendEncryptionServiceClient_CreateEncryptedVolume_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteEncryptedVolume provides a mock function with given fields: ctx, in, opts
func (_m *MiddleendEncryptionServiceClient) DeleteEncryptedVolume(ctx context.Context, in *_go.DeleteEncryptedVolumeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *emptypb.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *_go.DeleteEncryptedVolumeRequest, ...grpc.CallOption) (*emptypb.Empty, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *_go.DeleteEncryptedVolumeRequest, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *_go.DeleteEncryptedVolumeRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MiddleendEncryptionServiceClient_DeleteEncryptedVolume_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteEncryptedVolume'
type MiddleendEncryptionServiceClient_DeleteEncryptedVolume_Call struct {
	*mock.Call
}

// DeleteEncryptedVolume is a helper method to define mock.On call
//   - ctx context.Context
//   - in *_go.DeleteEncryptedVolumeRequest
//   - opts ...grpc.CallOption
func (_e *MiddleendEncryptionServiceClient_Expecter) DeleteEncryptedVolume(ctx interface{}, in interface{}, opts ...interface{}) *MiddleendEncryptionServiceClient_DeleteEncryptedVolume_Call {
	return &MiddleendEncryptionServiceClient_DeleteEncryptedVolume_Call{Call: _e.mock.On("DeleteEncryptedVolume",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MiddleendEncryptionServiceClient_DeleteEncryptedVolume_Call) Run(run func(ctx context.Context, in *_go.DeleteEncryptedVolumeRequest, opts ...grpc.CallOption)) *MiddleendEncryptionServiceClient_DeleteEncryptedVolume_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*_go.DeleteEncryptedVolumeRequest), variadicArgs...)
	})
	return _c
}

func (_c *MiddleendEncryptionServiceClient_DeleteEncryptedVolume_Call) Return(_a0 *emptypb.Empty, _a1 error) *MiddleendEncryptionServiceClient_DeleteEncryptedVolume_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MiddleendEncryptionServiceClient_DeleteEncryptedVolume_Call) RunAndReturn(run func(context.Context, *_go.DeleteEncryptedVolumeRequest, ...grpc.CallOption) (*emptypb.Empty, error)) *MiddleendEncryptionServiceClient_DeleteEncryptedVolume_Call {
	_c.Call.Return(run)
	return _c
}

// GetEncryptedVolume provides a mock function with given fields: ctx, in, opts
func (_m *MiddleendEncryptionServiceClient) GetEncryptedVolume(ctx context.Context, in *_go.GetEncryptedVolumeRequest, opts ...grpc.CallOption) (*_go.EncryptedVolume, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *_go.EncryptedVolume
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *_go.GetEncryptedVolumeRequest, ...grpc.CallOption) (*_go.EncryptedVolume, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *_go.GetEncryptedVolumeRequest, ...grpc.CallOption) *_go.EncryptedVolume); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*_go.EncryptedVolume)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *_go.GetEncryptedVolumeRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MiddleendEncryptionServiceClient_GetEncryptedVolume_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEncryptedVolume'
type MiddleendEncryptionServiceClient_GetEncryptedVolume_Call struct {
	*mock.Call
}

// GetEncryptedVolume is a helper method to define mock.On call
//   - ctx context.Context
//   - in *_go.GetEncryptedVolumeRequest
//   - opts ...grpc.CallOption
func (_e *MiddleendEncryptionServiceClient_Expecter) GetEncryptedVolume(ctx interface{}, in interface{}, opts ...interface{}) *MiddleendEncryptionServiceClient_GetEncryptedVolume_Call {
	return &MiddleendEncryptionServiceClient_GetEncryptedVolume_Call{Call: _e.mock.On("GetEncryptedVolume",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MiddleendEncryptionServiceClient_GetEncryptedVolume_Call) Run(run func(ctx context.Context, in *_go.GetEncryptedVolumeRequest, opts ...grpc.CallOption)) *MiddleendEncryptionServiceClient_GetEncryptedVolume_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*_go.GetEncryptedVolumeRequest), variadicArgs...)
	})
	return _c
}

func (_c *MiddleendEncryptionServiceClient_GetEncryptedVolume_Call) Return(_a0 *_go.EncryptedVolume, _a1 error) *MiddleendEncryptionServiceClient_GetEncryptedVolume_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MiddleendEncryptionServiceClient_GetEncryptedVolume_Call) RunAndReturn(run func(context.Context, *_go.GetEncryptedVolumeRequest, ...grpc.CallOption) (*_go.EncryptedVolume, error)) *MiddleendEncryptionServiceClient_GetEncryptedVolume_Call {
	_c.Call.Return(run)
	return _c
}

// ListEncryptedVolumes provides a mock function with given fields: ctx, in, opts
func (_m *MiddleendEncryptionServiceClient) ListEncryptedVolumes(ctx context.Context, in *_go.ListEncryptedVolumesRequest, opts ...grpc.CallOption) (*_go.ListEncryptedVolumesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *_go.ListEncryptedVolumesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *_go.ListEncryptedVolumesRequest, ...grpc.CallOption) (*_go.ListEncryptedVolumesResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *_go.ListEncryptedVolumesRequest, ...grpc.CallOption) *_go.ListEncryptedVolumesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*_go.ListEncryptedVolumesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *_go.ListEncryptedVolumesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MiddleendEncryptionServiceClient_ListEncryptedVolumes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListEncryptedVolumes'
type MiddleendEncryptionServiceClient_ListEncryptedVolumes_Call struct {
	*mock.Call
}

// ListEncryptedVolumes is a helper method to define mock.On call
//   - ctx context.Context
//   - in *_go.ListEncryptedVolumesRequest
//   - opts ...grpc.CallOption
func (_e *MiddleendEncryptionServiceClient_Expecter) ListEncryptedVolumes(ctx interface{}, in interface{}, opts ...interface{}) *MiddleendEncryptionServiceClient_ListEncryptedVolumes_Call {
	return &MiddleendEncryptionServiceClient_ListEncryptedVolumes_Call{Call: _e.mock.On("ListEncryptedVolumes",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MiddleendEncryptionServiceClient_ListEncryptedVolumes_Call) Run(run func(ctx context.Context, in *_go.ListEncryptedVolumesRequest, opts ...grpc.CallOption)) *MiddleendEncryptionServiceClient_ListEncryptedVolumes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*_go.ListEncryptedVolumesRequest), variadicArgs...)
	})
	return _c
}

func (_c *MiddleendEncryptionServiceClient_ListEncryptedVolumes_Call) Return(_a0 *_go.ListEncryptedVolumesResponse, _a1 error) *MiddleendEncryptionServiceClient_ListEncryptedVolumes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MiddleendEncryptionServiceClient_ListEncryptedVolumes_Call) RunAndReturn(run func(context.Context, *_go.ListEncryptedVolumesRequest, ...grpc.CallOption) (*_go.ListEncryptedVolumesResponse, error)) *MiddleendEncryptionServiceClient_ListEncryptedVolumes_Call {
	_c.Call.Return(run)
	return _c
}

// StatsEncryptedVolume provides a mock function with given fields: ctx, in, opts
func (_m *MiddleendEncryptionServiceClient) StatsEncryptedVolume(ctx context.Context, in *_go.StatsEncryptedVolumeRequest, opts ...grpc.CallOption) (*_go.StatsEncryptedVolumeResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *_go.StatsEncryptedVolumeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *_go.StatsEncryptedVolumeRequest, ...grpc.CallOption) (*_go.StatsEncryptedVolumeResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *_go.StatsEncryptedVolumeRequest, ...grpc.CallOption) *_go.StatsEncryptedVolumeResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*_go.StatsEncryptedVolumeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *_go.StatsEncryptedVolumeRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MiddleendEncryptionServiceClient_StatsEncryptedVolume_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StatsEncryptedVolume'
type MiddleendEncryptionServiceClient_StatsEncryptedVolume_Call struct {
	*mock.Call
}

// StatsEncryptedVolume is a helper method to define mock.On call
//   - ctx context.Context
//   - in *_go.StatsEncryptedVolumeRequest
//   - opts ...grpc.CallOption
func (_e *MiddleendEncryptionServiceClient_Expecter) StatsEncryptedVolume(ctx interface{}, in interface{}, opts ...interface{}) *MiddleendEncryptionServiceClient_StatsEncryptedVolume_Call {
	return &MiddleendEncryptionServiceClient_StatsEncryptedVolume_Call{Call: _e.mock.On("StatsEncryptedVolume",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MiddleendEncryptionServiceClient_StatsEncryptedVolume_Call) Run(run func(ctx context.Context, in *_go.StatsEncryptedVolumeRequest, opts ...grpc.CallOption)) *MiddleendEncryptionServiceClient_StatsEncryptedVolume_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*_go.StatsEncryptedVolumeRequest), variadicArgs...)
	})
	return _c
}

func (_c *MiddleendEncryptionServiceClient_StatsEncryptedVolume_Call) Return(_a0 *_go.StatsEncryptedVolumeResponse, _a1 error) *MiddleendEncryptionServiceClient_StatsEncryptedVolume_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MiddleendEncryptionServiceClient_StatsEncryptedVolume_Call) RunAndReturn(run func(context.Context, *_go.StatsEncryptedVolumeRequest, ...grpc.CallOption) (*_go.StatsEncryptedVolumeResponse, error)) *MiddleendEncryptionServiceClient_StatsEncryptedVolume_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateEncryptedVolume provides a mock function with given fields: ctx, in, opts
func (_m *MiddleendEncryptionServiceClient) UpdateEncryptedVolume(ctx context.Context, in *_go.UpdateEncryptedVolumeRequest, opts ...grpc.CallOption) (*_go.EncryptedVolume, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *_go.EncryptedVolume
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *_go.UpdateEncryptedVolumeRequest, ...grpc.CallOption) (*_go.EncryptedVolume, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *_go.UpdateEncryptedVolumeRequest, ...grpc.CallOption) *_go.EncryptedVolume); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*_go.EncryptedVolume)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *_go.UpdateEncryptedVolumeRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MiddleendEncryptionServiceClient_UpdateEncryptedVolume_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateEncryptedVolume'
type MiddleendEncryptionServiceClient_UpdateEncryptedVolume_Call struct {
	*mock.Call
}

// UpdateEncryptedVolume is a helper method to define mock.On call
//   - ctx context.Context
//   - in *_go.UpdateEncryptedVolumeRequest
//   - opts ...grpc.CallOption
func (_e *MiddleendEncryptionServiceClient_Expecter) UpdateEncryptedVolume(ctx interface{}, in interface{}, opts ...interface{}) *MiddleendEncryptionServiceClient_UpdateEncryptedVolume_Call {
	return &MiddleendEncryptionServiceClient_UpdateEncryptedVolume_Call{Call: _e.mock.On("UpdateEncryptedVolume",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MiddleendEncryptionServiceClient_UpdateEncryptedVolume_Call) Run(run func(ctx context.Context, in *_go.UpdateEncryptedVolumeRequest, opts ...grpc.CallOption)) *MiddleendEncryptionServiceClient_UpdateEncryptedVolume_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*_go.UpdateEncryptedVolumeRequest), variadicArgs...)
	})
	return _c
}

func (_c *MiddleendEncryptionServiceClient_UpdateEncryptedVolume_Call) Return(_a0 *_go.EncryptedVolume, _a1 error) *MiddleendEncryptionServiceClient_UpdateEncryptedVolume_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MiddleendEncryptionServiceClient_UpdateEncryptedVolume_Call) RunAndReturn(run func(context.Context, *_go.UpdateEncryptedVolumeRequest, ...grpc.CallOption) (*_go.EncryptedVolume, error)) *MiddleendEncryptionServiceClient_UpdateEncryptedVolume_Call {
	_c.Call.Return(run)
	return _c
}

// NewMiddleendEncryptionServiceClient creates a new instance of MiddleendEncryptionServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMiddleendEncryptionServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MiddleendEncryptionServiceClient {
	mock := &MiddleendEncryptionServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
