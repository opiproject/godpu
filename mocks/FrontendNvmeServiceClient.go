/* SPDX-License-Identifier: Apache-2.0
   Copyright (c) 2023 Dell Inc, or its subsidiaries.
*/
// Code generated by mockery v2.33.1. DO NOT EDIT.

package mocks

import (
	context "context"

	_go "github.com/opiproject/opi-api/storage/v1alpha1/gen/go"

	emptypb "google.golang.org/protobuf/types/known/emptypb"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// FrontendNvmeServiceClient is an autogenerated mock type for the FrontendNvmeServiceClient type
type FrontendNvmeServiceClient struct {
	mock.Mock
}

type FrontendNvmeServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *FrontendNvmeServiceClient) EXPECT() *FrontendNvmeServiceClient_Expecter {
	return &FrontendNvmeServiceClient_Expecter{mock: &_m.Mock}
}

// CreateNvmeController provides a mock function with given fields: ctx, in, opts
func (_m *FrontendNvmeServiceClient) CreateNvmeController(ctx context.Context, in *_go.CreateNvmeControllerRequest, opts ...grpc.CallOption) (*_go.NvmeController, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *_go.NvmeController
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *_go.CreateNvmeControllerRequest, ...grpc.CallOption) (*_go.NvmeController, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *_go.CreateNvmeControllerRequest, ...grpc.CallOption) *_go.NvmeController); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*_go.NvmeController)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *_go.CreateNvmeControllerRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FrontendNvmeServiceClient_CreateNvmeController_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateNvmeController'
type FrontendNvmeServiceClient_CreateNvmeController_Call struct {
	*mock.Call
}

// CreateNvmeController is a helper method to define mock.On call
//   - ctx context.Context
//   - in *_go.CreateNvmeControllerRequest
//   - opts ...grpc.CallOption
func (_e *FrontendNvmeServiceClient_Expecter) CreateNvmeController(ctx interface{}, in interface{}, opts ...interface{}) *FrontendNvmeServiceClient_CreateNvmeController_Call {
	return &FrontendNvmeServiceClient_CreateNvmeController_Call{Call: _e.mock.On("CreateNvmeController",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *FrontendNvmeServiceClient_CreateNvmeController_Call) Run(run func(ctx context.Context, in *_go.CreateNvmeControllerRequest, opts ...grpc.CallOption)) *FrontendNvmeServiceClient_CreateNvmeController_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*_go.CreateNvmeControllerRequest), variadicArgs...)
	})
	return _c
}

func (_c *FrontendNvmeServiceClient_CreateNvmeController_Call) Return(_a0 *_go.NvmeController, _a1 error) *FrontendNvmeServiceClient_CreateNvmeController_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FrontendNvmeServiceClient_CreateNvmeController_Call) RunAndReturn(run func(context.Context, *_go.CreateNvmeControllerRequest, ...grpc.CallOption) (*_go.NvmeController, error)) *FrontendNvmeServiceClient_CreateNvmeController_Call {
	_c.Call.Return(run)
	return _c
}

// CreateNvmeNamespace provides a mock function with given fields: ctx, in, opts
func (_m *FrontendNvmeServiceClient) CreateNvmeNamespace(ctx context.Context, in *_go.CreateNvmeNamespaceRequest, opts ...grpc.CallOption) (*_go.NvmeNamespace, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *_go.NvmeNamespace
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *_go.CreateNvmeNamespaceRequest, ...grpc.CallOption) (*_go.NvmeNamespace, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *_go.CreateNvmeNamespaceRequest, ...grpc.CallOption) *_go.NvmeNamespace); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*_go.NvmeNamespace)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *_go.CreateNvmeNamespaceRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FrontendNvmeServiceClient_CreateNvmeNamespace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateNvmeNamespace'
type FrontendNvmeServiceClient_CreateNvmeNamespace_Call struct {
	*mock.Call
}

// CreateNvmeNamespace is a helper method to define mock.On call
//   - ctx context.Context
//   - in *_go.CreateNvmeNamespaceRequest
//   - opts ...grpc.CallOption
func (_e *FrontendNvmeServiceClient_Expecter) CreateNvmeNamespace(ctx interface{}, in interface{}, opts ...interface{}) *FrontendNvmeServiceClient_CreateNvmeNamespace_Call {
	return &FrontendNvmeServiceClient_CreateNvmeNamespace_Call{Call: _e.mock.On("CreateNvmeNamespace",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *FrontendNvmeServiceClient_CreateNvmeNamespace_Call) Run(run func(ctx context.Context, in *_go.CreateNvmeNamespaceRequest, opts ...grpc.CallOption)) *FrontendNvmeServiceClient_CreateNvmeNamespace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*_go.CreateNvmeNamespaceRequest), variadicArgs...)
	})
	return _c
}

func (_c *FrontendNvmeServiceClient_CreateNvmeNamespace_Call) Return(_a0 *_go.NvmeNamespace, _a1 error) *FrontendNvmeServiceClient_CreateNvmeNamespace_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FrontendNvmeServiceClient_CreateNvmeNamespace_Call) RunAndReturn(run func(context.Context, *_go.CreateNvmeNamespaceRequest, ...grpc.CallOption) (*_go.NvmeNamespace, error)) *FrontendNvmeServiceClient_CreateNvmeNamespace_Call {
	_c.Call.Return(run)
	return _c
}

// CreateNvmeSubsystem provides a mock function with given fields: ctx, in, opts
func (_m *FrontendNvmeServiceClient) CreateNvmeSubsystem(ctx context.Context, in *_go.CreateNvmeSubsystemRequest, opts ...grpc.CallOption) (*_go.NvmeSubsystem, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *_go.NvmeSubsystem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *_go.CreateNvmeSubsystemRequest, ...grpc.CallOption) (*_go.NvmeSubsystem, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *_go.CreateNvmeSubsystemRequest, ...grpc.CallOption) *_go.NvmeSubsystem); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*_go.NvmeSubsystem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *_go.CreateNvmeSubsystemRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FrontendNvmeServiceClient_CreateNvmeSubsystem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateNvmeSubsystem'
type FrontendNvmeServiceClient_CreateNvmeSubsystem_Call struct {
	*mock.Call
}

// CreateNvmeSubsystem is a helper method to define mock.On call
//   - ctx context.Context
//   - in *_go.CreateNvmeSubsystemRequest
//   - opts ...grpc.CallOption
func (_e *FrontendNvmeServiceClient_Expecter) CreateNvmeSubsystem(ctx interface{}, in interface{}, opts ...interface{}) *FrontendNvmeServiceClient_CreateNvmeSubsystem_Call {
	return &FrontendNvmeServiceClient_CreateNvmeSubsystem_Call{Call: _e.mock.On("CreateNvmeSubsystem",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *FrontendNvmeServiceClient_CreateNvmeSubsystem_Call) Run(run func(ctx context.Context, in *_go.CreateNvmeSubsystemRequest, opts ...grpc.CallOption)) *FrontendNvmeServiceClient_CreateNvmeSubsystem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*_go.CreateNvmeSubsystemRequest), variadicArgs...)
	})
	return _c
}

func (_c *FrontendNvmeServiceClient_CreateNvmeSubsystem_Call) Return(_a0 *_go.NvmeSubsystem, _a1 error) *FrontendNvmeServiceClient_CreateNvmeSubsystem_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FrontendNvmeServiceClient_CreateNvmeSubsystem_Call) RunAndReturn(run func(context.Context, *_go.CreateNvmeSubsystemRequest, ...grpc.CallOption) (*_go.NvmeSubsystem, error)) *FrontendNvmeServiceClient_CreateNvmeSubsystem_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteNvmeController provides a mock function with given fields: ctx, in, opts
func (_m *FrontendNvmeServiceClient) DeleteNvmeController(ctx context.Context, in *_go.DeleteNvmeControllerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *emptypb.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *_go.DeleteNvmeControllerRequest, ...grpc.CallOption) (*emptypb.Empty, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *_go.DeleteNvmeControllerRequest, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *_go.DeleteNvmeControllerRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FrontendNvmeServiceClient_DeleteNvmeController_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteNvmeController'
type FrontendNvmeServiceClient_DeleteNvmeController_Call struct {
	*mock.Call
}

// DeleteNvmeController is a helper method to define mock.On call
//   - ctx context.Context
//   - in *_go.DeleteNvmeControllerRequest
//   - opts ...grpc.CallOption
func (_e *FrontendNvmeServiceClient_Expecter) DeleteNvmeController(ctx interface{}, in interface{}, opts ...interface{}) *FrontendNvmeServiceClient_DeleteNvmeController_Call {
	return &FrontendNvmeServiceClient_DeleteNvmeController_Call{Call: _e.mock.On("DeleteNvmeController",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *FrontendNvmeServiceClient_DeleteNvmeController_Call) Run(run func(ctx context.Context, in *_go.DeleteNvmeControllerRequest, opts ...grpc.CallOption)) *FrontendNvmeServiceClient_DeleteNvmeController_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*_go.DeleteNvmeControllerRequest), variadicArgs...)
	})
	return _c
}

func (_c *FrontendNvmeServiceClient_DeleteNvmeController_Call) Return(_a0 *emptypb.Empty, _a1 error) *FrontendNvmeServiceClient_DeleteNvmeController_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FrontendNvmeServiceClient_DeleteNvmeController_Call) RunAndReturn(run func(context.Context, *_go.DeleteNvmeControllerRequest, ...grpc.CallOption) (*emptypb.Empty, error)) *FrontendNvmeServiceClient_DeleteNvmeController_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteNvmeNamespace provides a mock function with given fields: ctx, in, opts
func (_m *FrontendNvmeServiceClient) DeleteNvmeNamespace(ctx context.Context, in *_go.DeleteNvmeNamespaceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *emptypb.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *_go.DeleteNvmeNamespaceRequest, ...grpc.CallOption) (*emptypb.Empty, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *_go.DeleteNvmeNamespaceRequest, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *_go.DeleteNvmeNamespaceRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FrontendNvmeServiceClient_DeleteNvmeNamespace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteNvmeNamespace'
type FrontendNvmeServiceClient_DeleteNvmeNamespace_Call struct {
	*mock.Call
}

// DeleteNvmeNamespace is a helper method to define mock.On call
//   - ctx context.Context
//   - in *_go.DeleteNvmeNamespaceRequest
//   - opts ...grpc.CallOption
func (_e *FrontendNvmeServiceClient_Expecter) DeleteNvmeNamespace(ctx interface{}, in interface{}, opts ...interface{}) *FrontendNvmeServiceClient_DeleteNvmeNamespace_Call {
	return &FrontendNvmeServiceClient_DeleteNvmeNamespace_Call{Call: _e.mock.On("DeleteNvmeNamespace",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *FrontendNvmeServiceClient_DeleteNvmeNamespace_Call) Run(run func(ctx context.Context, in *_go.DeleteNvmeNamespaceRequest, opts ...grpc.CallOption)) *FrontendNvmeServiceClient_DeleteNvmeNamespace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*_go.DeleteNvmeNamespaceRequest), variadicArgs...)
	})
	return _c
}

func (_c *FrontendNvmeServiceClient_DeleteNvmeNamespace_Call) Return(_a0 *emptypb.Empty, _a1 error) *FrontendNvmeServiceClient_DeleteNvmeNamespace_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FrontendNvmeServiceClient_DeleteNvmeNamespace_Call) RunAndReturn(run func(context.Context, *_go.DeleteNvmeNamespaceRequest, ...grpc.CallOption) (*emptypb.Empty, error)) *FrontendNvmeServiceClient_DeleteNvmeNamespace_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteNvmeSubsystem provides a mock function with given fields: ctx, in, opts
func (_m *FrontendNvmeServiceClient) DeleteNvmeSubsystem(ctx context.Context, in *_go.DeleteNvmeSubsystemRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *emptypb.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *_go.DeleteNvmeSubsystemRequest, ...grpc.CallOption) (*emptypb.Empty, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *_go.DeleteNvmeSubsystemRequest, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *_go.DeleteNvmeSubsystemRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FrontendNvmeServiceClient_DeleteNvmeSubsystem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteNvmeSubsystem'
type FrontendNvmeServiceClient_DeleteNvmeSubsystem_Call struct {
	*mock.Call
}

// DeleteNvmeSubsystem is a helper method to define mock.On call
//   - ctx context.Context
//   - in *_go.DeleteNvmeSubsystemRequest
//   - opts ...grpc.CallOption
func (_e *FrontendNvmeServiceClient_Expecter) DeleteNvmeSubsystem(ctx interface{}, in interface{}, opts ...interface{}) *FrontendNvmeServiceClient_DeleteNvmeSubsystem_Call {
	return &FrontendNvmeServiceClient_DeleteNvmeSubsystem_Call{Call: _e.mock.On("DeleteNvmeSubsystem",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *FrontendNvmeServiceClient_DeleteNvmeSubsystem_Call) Run(run func(ctx context.Context, in *_go.DeleteNvmeSubsystemRequest, opts ...grpc.CallOption)) *FrontendNvmeServiceClient_DeleteNvmeSubsystem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*_go.DeleteNvmeSubsystemRequest), variadicArgs...)
	})
	return _c
}

func (_c *FrontendNvmeServiceClient_DeleteNvmeSubsystem_Call) Return(_a0 *emptypb.Empty, _a1 error) *FrontendNvmeServiceClient_DeleteNvmeSubsystem_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FrontendNvmeServiceClient_DeleteNvmeSubsystem_Call) RunAndReturn(run func(context.Context, *_go.DeleteNvmeSubsystemRequest, ...grpc.CallOption) (*emptypb.Empty, error)) *FrontendNvmeServiceClient_DeleteNvmeSubsystem_Call {
	_c.Call.Return(run)
	return _c
}

// GetNvmeController provides a mock function with given fields: ctx, in, opts
func (_m *FrontendNvmeServiceClient) GetNvmeController(ctx context.Context, in *_go.GetNvmeControllerRequest, opts ...grpc.CallOption) (*_go.NvmeController, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *_go.NvmeController
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *_go.GetNvmeControllerRequest, ...grpc.CallOption) (*_go.NvmeController, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *_go.GetNvmeControllerRequest, ...grpc.CallOption) *_go.NvmeController); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*_go.NvmeController)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *_go.GetNvmeControllerRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FrontendNvmeServiceClient_GetNvmeController_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNvmeController'
type FrontendNvmeServiceClient_GetNvmeController_Call struct {
	*mock.Call
}

// GetNvmeController is a helper method to define mock.On call
//   - ctx context.Context
//   - in *_go.GetNvmeControllerRequest
//   - opts ...grpc.CallOption
func (_e *FrontendNvmeServiceClient_Expecter) GetNvmeController(ctx interface{}, in interface{}, opts ...interface{}) *FrontendNvmeServiceClient_GetNvmeController_Call {
	return &FrontendNvmeServiceClient_GetNvmeController_Call{Call: _e.mock.On("GetNvmeController",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *FrontendNvmeServiceClient_GetNvmeController_Call) Run(run func(ctx context.Context, in *_go.GetNvmeControllerRequest, opts ...grpc.CallOption)) *FrontendNvmeServiceClient_GetNvmeController_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*_go.GetNvmeControllerRequest), variadicArgs...)
	})
	return _c
}

func (_c *FrontendNvmeServiceClient_GetNvmeController_Call) Return(_a0 *_go.NvmeController, _a1 error) *FrontendNvmeServiceClient_GetNvmeController_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FrontendNvmeServiceClient_GetNvmeController_Call) RunAndReturn(run func(context.Context, *_go.GetNvmeControllerRequest, ...grpc.CallOption) (*_go.NvmeController, error)) *FrontendNvmeServiceClient_GetNvmeController_Call {
	_c.Call.Return(run)
	return _c
}

// GetNvmeNamespace provides a mock function with given fields: ctx, in, opts
func (_m *FrontendNvmeServiceClient) GetNvmeNamespace(ctx context.Context, in *_go.GetNvmeNamespaceRequest, opts ...grpc.CallOption) (*_go.NvmeNamespace, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *_go.NvmeNamespace
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *_go.GetNvmeNamespaceRequest, ...grpc.CallOption) (*_go.NvmeNamespace, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *_go.GetNvmeNamespaceRequest, ...grpc.CallOption) *_go.NvmeNamespace); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*_go.NvmeNamespace)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *_go.GetNvmeNamespaceRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FrontendNvmeServiceClient_GetNvmeNamespace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNvmeNamespace'
type FrontendNvmeServiceClient_GetNvmeNamespace_Call struct {
	*mock.Call
}

// GetNvmeNamespace is a helper method to define mock.On call
//   - ctx context.Context
//   - in *_go.GetNvmeNamespaceRequest
//   - opts ...grpc.CallOption
func (_e *FrontendNvmeServiceClient_Expecter) GetNvmeNamespace(ctx interface{}, in interface{}, opts ...interface{}) *FrontendNvmeServiceClient_GetNvmeNamespace_Call {
	return &FrontendNvmeServiceClient_GetNvmeNamespace_Call{Call: _e.mock.On("GetNvmeNamespace",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *FrontendNvmeServiceClient_GetNvmeNamespace_Call) Run(run func(ctx context.Context, in *_go.GetNvmeNamespaceRequest, opts ...grpc.CallOption)) *FrontendNvmeServiceClient_GetNvmeNamespace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*_go.GetNvmeNamespaceRequest), variadicArgs...)
	})
	return _c
}

func (_c *FrontendNvmeServiceClient_GetNvmeNamespace_Call) Return(_a0 *_go.NvmeNamespace, _a1 error) *FrontendNvmeServiceClient_GetNvmeNamespace_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FrontendNvmeServiceClient_GetNvmeNamespace_Call) RunAndReturn(run func(context.Context, *_go.GetNvmeNamespaceRequest, ...grpc.CallOption) (*_go.NvmeNamespace, error)) *FrontendNvmeServiceClient_GetNvmeNamespace_Call {
	_c.Call.Return(run)
	return _c
}

// GetNvmeSubsystem provides a mock function with given fields: ctx, in, opts
func (_m *FrontendNvmeServiceClient) GetNvmeSubsystem(ctx context.Context, in *_go.GetNvmeSubsystemRequest, opts ...grpc.CallOption) (*_go.NvmeSubsystem, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *_go.NvmeSubsystem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *_go.GetNvmeSubsystemRequest, ...grpc.CallOption) (*_go.NvmeSubsystem, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *_go.GetNvmeSubsystemRequest, ...grpc.CallOption) *_go.NvmeSubsystem); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*_go.NvmeSubsystem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *_go.GetNvmeSubsystemRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FrontendNvmeServiceClient_GetNvmeSubsystem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNvmeSubsystem'
type FrontendNvmeServiceClient_GetNvmeSubsystem_Call struct {
	*mock.Call
}

// GetNvmeSubsystem is a helper method to define mock.On call
//   - ctx context.Context
//   - in *_go.GetNvmeSubsystemRequest
//   - opts ...grpc.CallOption
func (_e *FrontendNvmeServiceClient_Expecter) GetNvmeSubsystem(ctx interface{}, in interface{}, opts ...interface{}) *FrontendNvmeServiceClient_GetNvmeSubsystem_Call {
	return &FrontendNvmeServiceClient_GetNvmeSubsystem_Call{Call: _e.mock.On("GetNvmeSubsystem",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *FrontendNvmeServiceClient_GetNvmeSubsystem_Call) Run(run func(ctx context.Context, in *_go.GetNvmeSubsystemRequest, opts ...grpc.CallOption)) *FrontendNvmeServiceClient_GetNvmeSubsystem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*_go.GetNvmeSubsystemRequest), variadicArgs...)
	})
	return _c
}

func (_c *FrontendNvmeServiceClient_GetNvmeSubsystem_Call) Return(_a0 *_go.NvmeSubsystem, _a1 error) *FrontendNvmeServiceClient_GetNvmeSubsystem_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FrontendNvmeServiceClient_GetNvmeSubsystem_Call) RunAndReturn(run func(context.Context, *_go.GetNvmeSubsystemRequest, ...grpc.CallOption) (*_go.NvmeSubsystem, error)) *FrontendNvmeServiceClient_GetNvmeSubsystem_Call {
	_c.Call.Return(run)
	return _c
}

// ListNvmeControllers provides a mock function with given fields: ctx, in, opts
func (_m *FrontendNvmeServiceClient) ListNvmeControllers(ctx context.Context, in *_go.ListNvmeControllersRequest, opts ...grpc.CallOption) (*_go.ListNvmeControllersResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *_go.ListNvmeControllersResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *_go.ListNvmeControllersRequest, ...grpc.CallOption) (*_go.ListNvmeControllersResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *_go.ListNvmeControllersRequest, ...grpc.CallOption) *_go.ListNvmeControllersResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*_go.ListNvmeControllersResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *_go.ListNvmeControllersRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FrontendNvmeServiceClient_ListNvmeControllers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListNvmeControllers'
type FrontendNvmeServiceClient_ListNvmeControllers_Call struct {
	*mock.Call
}

// ListNvmeControllers is a helper method to define mock.On call
//   - ctx context.Context
//   - in *_go.ListNvmeControllersRequest
//   - opts ...grpc.CallOption
func (_e *FrontendNvmeServiceClient_Expecter) ListNvmeControllers(ctx interface{}, in interface{}, opts ...interface{}) *FrontendNvmeServiceClient_ListNvmeControllers_Call {
	return &FrontendNvmeServiceClient_ListNvmeControllers_Call{Call: _e.mock.On("ListNvmeControllers",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *FrontendNvmeServiceClient_ListNvmeControllers_Call) Run(run func(ctx context.Context, in *_go.ListNvmeControllersRequest, opts ...grpc.CallOption)) *FrontendNvmeServiceClient_ListNvmeControllers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*_go.ListNvmeControllersRequest), variadicArgs...)
	})
	return _c
}

func (_c *FrontendNvmeServiceClient_ListNvmeControllers_Call) Return(_a0 *_go.ListNvmeControllersResponse, _a1 error) *FrontendNvmeServiceClient_ListNvmeControllers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FrontendNvmeServiceClient_ListNvmeControllers_Call) RunAndReturn(run func(context.Context, *_go.ListNvmeControllersRequest, ...grpc.CallOption) (*_go.ListNvmeControllersResponse, error)) *FrontendNvmeServiceClient_ListNvmeControllers_Call {
	_c.Call.Return(run)
	return _c
}

// ListNvmeNamespaces provides a mock function with given fields: ctx, in, opts
func (_m *FrontendNvmeServiceClient) ListNvmeNamespaces(ctx context.Context, in *_go.ListNvmeNamespacesRequest, opts ...grpc.CallOption) (*_go.ListNvmeNamespacesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *_go.ListNvmeNamespacesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *_go.ListNvmeNamespacesRequest, ...grpc.CallOption) (*_go.ListNvmeNamespacesResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *_go.ListNvmeNamespacesRequest, ...grpc.CallOption) *_go.ListNvmeNamespacesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*_go.ListNvmeNamespacesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *_go.ListNvmeNamespacesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FrontendNvmeServiceClient_ListNvmeNamespaces_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListNvmeNamespaces'
type FrontendNvmeServiceClient_ListNvmeNamespaces_Call struct {
	*mock.Call
}

// ListNvmeNamespaces is a helper method to define mock.On call
//   - ctx context.Context
//   - in *_go.ListNvmeNamespacesRequest
//   - opts ...grpc.CallOption
func (_e *FrontendNvmeServiceClient_Expecter) ListNvmeNamespaces(ctx interface{}, in interface{}, opts ...interface{}) *FrontendNvmeServiceClient_ListNvmeNamespaces_Call {
	return &FrontendNvmeServiceClient_ListNvmeNamespaces_Call{Call: _e.mock.On("ListNvmeNamespaces",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *FrontendNvmeServiceClient_ListNvmeNamespaces_Call) Run(run func(ctx context.Context, in *_go.ListNvmeNamespacesRequest, opts ...grpc.CallOption)) *FrontendNvmeServiceClient_ListNvmeNamespaces_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*_go.ListNvmeNamespacesRequest), variadicArgs...)
	})
	return _c
}

func (_c *FrontendNvmeServiceClient_ListNvmeNamespaces_Call) Return(_a0 *_go.ListNvmeNamespacesResponse, _a1 error) *FrontendNvmeServiceClient_ListNvmeNamespaces_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FrontendNvmeServiceClient_ListNvmeNamespaces_Call) RunAndReturn(run func(context.Context, *_go.ListNvmeNamespacesRequest, ...grpc.CallOption) (*_go.ListNvmeNamespacesResponse, error)) *FrontendNvmeServiceClient_ListNvmeNamespaces_Call {
	_c.Call.Return(run)
	return _c
}

// ListNvmeSubsystems provides a mock function with given fields: ctx, in, opts
func (_m *FrontendNvmeServiceClient) ListNvmeSubsystems(ctx context.Context, in *_go.ListNvmeSubsystemsRequest, opts ...grpc.CallOption) (*_go.ListNvmeSubsystemsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *_go.ListNvmeSubsystemsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *_go.ListNvmeSubsystemsRequest, ...grpc.CallOption) (*_go.ListNvmeSubsystemsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *_go.ListNvmeSubsystemsRequest, ...grpc.CallOption) *_go.ListNvmeSubsystemsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*_go.ListNvmeSubsystemsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *_go.ListNvmeSubsystemsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FrontendNvmeServiceClient_ListNvmeSubsystems_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListNvmeSubsystems'
type FrontendNvmeServiceClient_ListNvmeSubsystems_Call struct {
	*mock.Call
}

// ListNvmeSubsystems is a helper method to define mock.On call
//   - ctx context.Context
//   - in *_go.ListNvmeSubsystemsRequest
//   - opts ...grpc.CallOption
func (_e *FrontendNvmeServiceClient_Expecter) ListNvmeSubsystems(ctx interface{}, in interface{}, opts ...interface{}) *FrontendNvmeServiceClient_ListNvmeSubsystems_Call {
	return &FrontendNvmeServiceClient_ListNvmeSubsystems_Call{Call: _e.mock.On("ListNvmeSubsystems",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *FrontendNvmeServiceClient_ListNvmeSubsystems_Call) Run(run func(ctx context.Context, in *_go.ListNvmeSubsystemsRequest, opts ...grpc.CallOption)) *FrontendNvmeServiceClient_ListNvmeSubsystems_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*_go.ListNvmeSubsystemsRequest), variadicArgs...)
	})
	return _c
}

func (_c *FrontendNvmeServiceClient_ListNvmeSubsystems_Call) Return(_a0 *_go.ListNvmeSubsystemsResponse, _a1 error) *FrontendNvmeServiceClient_ListNvmeSubsystems_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FrontendNvmeServiceClient_ListNvmeSubsystems_Call) RunAndReturn(run func(context.Context, *_go.ListNvmeSubsystemsRequest, ...grpc.CallOption) (*_go.ListNvmeSubsystemsResponse, error)) *FrontendNvmeServiceClient_ListNvmeSubsystems_Call {
	_c.Call.Return(run)
	return _c
}

// StatsNvmeController provides a mock function with given fields: ctx, in, opts
func (_m *FrontendNvmeServiceClient) StatsNvmeController(ctx context.Context, in *_go.StatsNvmeControllerRequest, opts ...grpc.CallOption) (*_go.StatsNvmeControllerResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *_go.StatsNvmeControllerResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *_go.StatsNvmeControllerRequest, ...grpc.CallOption) (*_go.StatsNvmeControllerResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *_go.StatsNvmeControllerRequest, ...grpc.CallOption) *_go.StatsNvmeControllerResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*_go.StatsNvmeControllerResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *_go.StatsNvmeControllerRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FrontendNvmeServiceClient_StatsNvmeController_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StatsNvmeController'
type FrontendNvmeServiceClient_StatsNvmeController_Call struct {
	*mock.Call
}

// StatsNvmeController is a helper method to define mock.On call
//   - ctx context.Context
//   - in *_go.StatsNvmeControllerRequest
//   - opts ...grpc.CallOption
func (_e *FrontendNvmeServiceClient_Expecter) StatsNvmeController(ctx interface{}, in interface{}, opts ...interface{}) *FrontendNvmeServiceClient_StatsNvmeController_Call {
	return &FrontendNvmeServiceClient_StatsNvmeController_Call{Call: _e.mock.On("StatsNvmeController",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *FrontendNvmeServiceClient_StatsNvmeController_Call) Run(run func(ctx context.Context, in *_go.StatsNvmeControllerRequest, opts ...grpc.CallOption)) *FrontendNvmeServiceClient_StatsNvmeController_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*_go.StatsNvmeControllerRequest), variadicArgs...)
	})
	return _c
}

func (_c *FrontendNvmeServiceClient_StatsNvmeController_Call) Return(_a0 *_go.StatsNvmeControllerResponse, _a1 error) *FrontendNvmeServiceClient_StatsNvmeController_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FrontendNvmeServiceClient_StatsNvmeController_Call) RunAndReturn(run func(context.Context, *_go.StatsNvmeControllerRequest, ...grpc.CallOption) (*_go.StatsNvmeControllerResponse, error)) *FrontendNvmeServiceClient_StatsNvmeController_Call {
	_c.Call.Return(run)
	return _c
}

// StatsNvmeNamespace provides a mock function with given fields: ctx, in, opts
func (_m *FrontendNvmeServiceClient) StatsNvmeNamespace(ctx context.Context, in *_go.StatsNvmeNamespaceRequest, opts ...grpc.CallOption) (*_go.StatsNvmeNamespaceResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *_go.StatsNvmeNamespaceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *_go.StatsNvmeNamespaceRequest, ...grpc.CallOption) (*_go.StatsNvmeNamespaceResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *_go.StatsNvmeNamespaceRequest, ...grpc.CallOption) *_go.StatsNvmeNamespaceResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*_go.StatsNvmeNamespaceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *_go.StatsNvmeNamespaceRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FrontendNvmeServiceClient_StatsNvmeNamespace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StatsNvmeNamespace'
type FrontendNvmeServiceClient_StatsNvmeNamespace_Call struct {
	*mock.Call
}

// StatsNvmeNamespace is a helper method to define mock.On call
//   - ctx context.Context
//   - in *_go.StatsNvmeNamespaceRequest
//   - opts ...grpc.CallOption
func (_e *FrontendNvmeServiceClient_Expecter) StatsNvmeNamespace(ctx interface{}, in interface{}, opts ...interface{}) *FrontendNvmeServiceClient_StatsNvmeNamespace_Call {
	return &FrontendNvmeServiceClient_StatsNvmeNamespace_Call{Call: _e.mock.On("StatsNvmeNamespace",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *FrontendNvmeServiceClient_StatsNvmeNamespace_Call) Run(run func(ctx context.Context, in *_go.StatsNvmeNamespaceRequest, opts ...grpc.CallOption)) *FrontendNvmeServiceClient_StatsNvmeNamespace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*_go.StatsNvmeNamespaceRequest), variadicArgs...)
	})
	return _c
}

func (_c *FrontendNvmeServiceClient_StatsNvmeNamespace_Call) Return(_a0 *_go.StatsNvmeNamespaceResponse, _a1 error) *FrontendNvmeServiceClient_StatsNvmeNamespace_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FrontendNvmeServiceClient_StatsNvmeNamespace_Call) RunAndReturn(run func(context.Context, *_go.StatsNvmeNamespaceRequest, ...grpc.CallOption) (*_go.StatsNvmeNamespaceResponse, error)) *FrontendNvmeServiceClient_StatsNvmeNamespace_Call {
	_c.Call.Return(run)
	return _c
}

// StatsNvmeSubsystem provides a mock function with given fields: ctx, in, opts
func (_m *FrontendNvmeServiceClient) StatsNvmeSubsystem(ctx context.Context, in *_go.StatsNvmeSubsystemRequest, opts ...grpc.CallOption) (*_go.StatsNvmeSubsystemResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *_go.StatsNvmeSubsystemResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *_go.StatsNvmeSubsystemRequest, ...grpc.CallOption) (*_go.StatsNvmeSubsystemResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *_go.StatsNvmeSubsystemRequest, ...grpc.CallOption) *_go.StatsNvmeSubsystemResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*_go.StatsNvmeSubsystemResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *_go.StatsNvmeSubsystemRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FrontendNvmeServiceClient_StatsNvmeSubsystem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StatsNvmeSubsystem'
type FrontendNvmeServiceClient_StatsNvmeSubsystem_Call struct {
	*mock.Call
}

// StatsNvmeSubsystem is a helper method to define mock.On call
//   - ctx context.Context
//   - in *_go.StatsNvmeSubsystemRequest
//   - opts ...grpc.CallOption
func (_e *FrontendNvmeServiceClient_Expecter) StatsNvmeSubsystem(ctx interface{}, in interface{}, opts ...interface{}) *FrontendNvmeServiceClient_StatsNvmeSubsystem_Call {
	return &FrontendNvmeServiceClient_StatsNvmeSubsystem_Call{Call: _e.mock.On("StatsNvmeSubsystem",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *FrontendNvmeServiceClient_StatsNvmeSubsystem_Call) Run(run func(ctx context.Context, in *_go.StatsNvmeSubsystemRequest, opts ...grpc.CallOption)) *FrontendNvmeServiceClient_StatsNvmeSubsystem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*_go.StatsNvmeSubsystemRequest), variadicArgs...)
	})
	return _c
}

func (_c *FrontendNvmeServiceClient_StatsNvmeSubsystem_Call) Return(_a0 *_go.StatsNvmeSubsystemResponse, _a1 error) *FrontendNvmeServiceClient_StatsNvmeSubsystem_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FrontendNvmeServiceClient_StatsNvmeSubsystem_Call) RunAndReturn(run func(context.Context, *_go.StatsNvmeSubsystemRequest, ...grpc.CallOption) (*_go.StatsNvmeSubsystemResponse, error)) *FrontendNvmeServiceClient_StatsNvmeSubsystem_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateNvmeController provides a mock function with given fields: ctx, in, opts
func (_m *FrontendNvmeServiceClient) UpdateNvmeController(ctx context.Context, in *_go.UpdateNvmeControllerRequest, opts ...grpc.CallOption) (*_go.NvmeController, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *_go.NvmeController
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *_go.UpdateNvmeControllerRequest, ...grpc.CallOption) (*_go.NvmeController, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *_go.UpdateNvmeControllerRequest, ...grpc.CallOption) *_go.NvmeController); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*_go.NvmeController)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *_go.UpdateNvmeControllerRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FrontendNvmeServiceClient_UpdateNvmeController_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateNvmeController'
type FrontendNvmeServiceClient_UpdateNvmeController_Call struct {
	*mock.Call
}

// UpdateNvmeController is a helper method to define mock.On call
//   - ctx context.Context
//   - in *_go.UpdateNvmeControllerRequest
//   - opts ...grpc.CallOption
func (_e *FrontendNvmeServiceClient_Expecter) UpdateNvmeController(ctx interface{}, in interface{}, opts ...interface{}) *FrontendNvmeServiceClient_UpdateNvmeController_Call {
	return &FrontendNvmeServiceClient_UpdateNvmeController_Call{Call: _e.mock.On("UpdateNvmeController",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *FrontendNvmeServiceClient_UpdateNvmeController_Call) Run(run func(ctx context.Context, in *_go.UpdateNvmeControllerRequest, opts ...grpc.CallOption)) *FrontendNvmeServiceClient_UpdateNvmeController_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*_go.UpdateNvmeControllerRequest), variadicArgs...)
	})
	return _c
}

func (_c *FrontendNvmeServiceClient_UpdateNvmeController_Call) Return(_a0 *_go.NvmeController, _a1 error) *FrontendNvmeServiceClient_UpdateNvmeController_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FrontendNvmeServiceClient_UpdateNvmeController_Call) RunAndReturn(run func(context.Context, *_go.UpdateNvmeControllerRequest, ...grpc.CallOption) (*_go.NvmeController, error)) *FrontendNvmeServiceClient_UpdateNvmeController_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateNvmeNamespace provides a mock function with given fields: ctx, in, opts
func (_m *FrontendNvmeServiceClient) UpdateNvmeNamespace(ctx context.Context, in *_go.UpdateNvmeNamespaceRequest, opts ...grpc.CallOption) (*_go.NvmeNamespace, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *_go.NvmeNamespace
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *_go.UpdateNvmeNamespaceRequest, ...grpc.CallOption) (*_go.NvmeNamespace, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *_go.UpdateNvmeNamespaceRequest, ...grpc.CallOption) *_go.NvmeNamespace); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*_go.NvmeNamespace)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *_go.UpdateNvmeNamespaceRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FrontendNvmeServiceClient_UpdateNvmeNamespace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateNvmeNamespace'
type FrontendNvmeServiceClient_UpdateNvmeNamespace_Call struct {
	*mock.Call
}

// UpdateNvmeNamespace is a helper method to define mock.On call
//   - ctx context.Context
//   - in *_go.UpdateNvmeNamespaceRequest
//   - opts ...grpc.CallOption
func (_e *FrontendNvmeServiceClient_Expecter) UpdateNvmeNamespace(ctx interface{}, in interface{}, opts ...interface{}) *FrontendNvmeServiceClient_UpdateNvmeNamespace_Call {
	return &FrontendNvmeServiceClient_UpdateNvmeNamespace_Call{Call: _e.mock.On("UpdateNvmeNamespace",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *FrontendNvmeServiceClient_UpdateNvmeNamespace_Call) Run(run func(ctx context.Context, in *_go.UpdateNvmeNamespaceRequest, opts ...grpc.CallOption)) *FrontendNvmeServiceClient_UpdateNvmeNamespace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*_go.UpdateNvmeNamespaceRequest), variadicArgs...)
	})
	return _c
}

func (_c *FrontendNvmeServiceClient_UpdateNvmeNamespace_Call) Return(_a0 *_go.NvmeNamespace, _a1 error) *FrontendNvmeServiceClient_UpdateNvmeNamespace_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FrontendNvmeServiceClient_UpdateNvmeNamespace_Call) RunAndReturn(run func(context.Context, *_go.UpdateNvmeNamespaceRequest, ...grpc.CallOption) (*_go.NvmeNamespace, error)) *FrontendNvmeServiceClient_UpdateNvmeNamespace_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateNvmeSubsystem provides a mock function with given fields: ctx, in, opts
func (_m *FrontendNvmeServiceClient) UpdateNvmeSubsystem(ctx context.Context, in *_go.UpdateNvmeSubsystemRequest, opts ...grpc.CallOption) (*_go.NvmeSubsystem, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *_go.NvmeSubsystem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *_go.UpdateNvmeSubsystemRequest, ...grpc.CallOption) (*_go.NvmeSubsystem, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *_go.UpdateNvmeSubsystemRequest, ...grpc.CallOption) *_go.NvmeSubsystem); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*_go.NvmeSubsystem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *_go.UpdateNvmeSubsystemRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FrontendNvmeServiceClient_UpdateNvmeSubsystem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateNvmeSubsystem'
type FrontendNvmeServiceClient_UpdateNvmeSubsystem_Call struct {
	*mock.Call
}

// UpdateNvmeSubsystem is a helper method to define mock.On call
//   - ctx context.Context
//   - in *_go.UpdateNvmeSubsystemRequest
//   - opts ...grpc.CallOption
func (_e *FrontendNvmeServiceClient_Expecter) UpdateNvmeSubsystem(ctx interface{}, in interface{}, opts ...interface{}) *FrontendNvmeServiceClient_UpdateNvmeSubsystem_Call {
	return &FrontendNvmeServiceClient_UpdateNvmeSubsystem_Call{Call: _e.mock.On("UpdateNvmeSubsystem",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *FrontendNvmeServiceClient_UpdateNvmeSubsystem_Call) Run(run func(ctx context.Context, in *_go.UpdateNvmeSubsystemRequest, opts ...grpc.CallOption)) *FrontendNvmeServiceClient_UpdateNvmeSubsystem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*_go.UpdateNvmeSubsystemRequest), variadicArgs...)
	})
	return _c
}

func (_c *FrontendNvmeServiceClient_UpdateNvmeSubsystem_Call) Return(_a0 *_go.NvmeSubsystem, _a1 error) *FrontendNvmeServiceClient_UpdateNvmeSubsystem_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FrontendNvmeServiceClient_UpdateNvmeSubsystem_Call) RunAndReturn(run func(context.Context, *_go.UpdateNvmeSubsystemRequest, ...grpc.CallOption) (*_go.NvmeSubsystem, error)) *FrontendNvmeServiceClient_UpdateNvmeSubsystem_Call {
	_c.Call.Return(run)
	return _c
}

// NewFrontendNvmeServiceClient creates a new instance of FrontendNvmeServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFrontendNvmeServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *FrontendNvmeServiceClient {
	mock := &FrontendNvmeServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
