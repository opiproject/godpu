/* SPDX-License-Identifier: Apache-2.0
   Copyright (c) 2023 Dell Inc, or its subsidiaries.
*/
// Code generated by mockery v2.33.1. DO NOT EDIT.

package mocks

import (
	context "context"

	_go "github.com/opiproject/opi-api/network/evpn-gw/v1alpha1/gen/go"

	emptypb "google.golang.org/protobuf/types/known/emptypb"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// LogicalBridgeServiceClient is an autogenerated mock type for the LogicalBridgeServiceClient type
type LogicalBridgeServiceClient struct {
	mock.Mock
}

type LogicalBridgeServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *LogicalBridgeServiceClient) EXPECT() *LogicalBridgeServiceClient_Expecter {
	return &LogicalBridgeServiceClient_Expecter{mock: &_m.Mock}
}

// CreateLogicalBridge provides a mock function with given fields: ctx, in, opts
func (_m *LogicalBridgeServiceClient) CreateLogicalBridge(ctx context.Context, in *_go.CreateLogicalBridgeRequest, opts ...grpc.CallOption) (*_go.LogicalBridge, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *_go.LogicalBridge
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *_go.CreateLogicalBridgeRequest, ...grpc.CallOption) (*_go.LogicalBridge, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *_go.CreateLogicalBridgeRequest, ...grpc.CallOption) *_go.LogicalBridge); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*_go.LogicalBridge)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *_go.CreateLogicalBridgeRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LogicalBridgeServiceClient_CreateLogicalBridge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateLogicalBridge'
type LogicalBridgeServiceClient_CreateLogicalBridge_Call struct {
	*mock.Call
}

// CreateLogicalBridge is a helper method to define mock.On call
//   - ctx context.Context
//   - in *_go.CreateLogicalBridgeRequest
//   - opts ...grpc.CallOption
func (_e *LogicalBridgeServiceClient_Expecter) CreateLogicalBridge(ctx interface{}, in interface{}, opts ...interface{}) *LogicalBridgeServiceClient_CreateLogicalBridge_Call {
	return &LogicalBridgeServiceClient_CreateLogicalBridge_Call{Call: _e.mock.On("CreateLogicalBridge",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *LogicalBridgeServiceClient_CreateLogicalBridge_Call) Run(run func(ctx context.Context, in *_go.CreateLogicalBridgeRequest, opts ...grpc.CallOption)) *LogicalBridgeServiceClient_CreateLogicalBridge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*_go.CreateLogicalBridgeRequest), variadicArgs...)
	})
	return _c
}

func (_c *LogicalBridgeServiceClient_CreateLogicalBridge_Call) Return(_a0 *_go.LogicalBridge, _a1 error) *LogicalBridgeServiceClient_CreateLogicalBridge_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LogicalBridgeServiceClient_CreateLogicalBridge_Call) RunAndReturn(run func(context.Context, *_go.CreateLogicalBridgeRequest, ...grpc.CallOption) (*_go.LogicalBridge, error)) *LogicalBridgeServiceClient_CreateLogicalBridge_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteLogicalBridge provides a mock function with given fields: ctx, in, opts
func (_m *LogicalBridgeServiceClient) DeleteLogicalBridge(ctx context.Context, in *_go.DeleteLogicalBridgeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *emptypb.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *_go.DeleteLogicalBridgeRequest, ...grpc.CallOption) (*emptypb.Empty, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *_go.DeleteLogicalBridgeRequest, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *_go.DeleteLogicalBridgeRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LogicalBridgeServiceClient_DeleteLogicalBridge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteLogicalBridge'
type LogicalBridgeServiceClient_DeleteLogicalBridge_Call struct {
	*mock.Call
}

// DeleteLogicalBridge is a helper method to define mock.On call
//   - ctx context.Context
//   - in *_go.DeleteLogicalBridgeRequest
//   - opts ...grpc.CallOption
func (_e *LogicalBridgeServiceClient_Expecter) DeleteLogicalBridge(ctx interface{}, in interface{}, opts ...interface{}) *LogicalBridgeServiceClient_DeleteLogicalBridge_Call {
	return &LogicalBridgeServiceClient_DeleteLogicalBridge_Call{Call: _e.mock.On("DeleteLogicalBridge",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *LogicalBridgeServiceClient_DeleteLogicalBridge_Call) Run(run func(ctx context.Context, in *_go.DeleteLogicalBridgeRequest, opts ...grpc.CallOption)) *LogicalBridgeServiceClient_DeleteLogicalBridge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*_go.DeleteLogicalBridgeRequest), variadicArgs...)
	})
	return _c
}

func (_c *LogicalBridgeServiceClient_DeleteLogicalBridge_Call) Return(_a0 *emptypb.Empty, _a1 error) *LogicalBridgeServiceClient_DeleteLogicalBridge_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LogicalBridgeServiceClient_DeleteLogicalBridge_Call) RunAndReturn(run func(context.Context, *_go.DeleteLogicalBridgeRequest, ...grpc.CallOption) (*emptypb.Empty, error)) *LogicalBridgeServiceClient_DeleteLogicalBridge_Call {
	_c.Call.Return(run)
	return _c
}

// GetLogicalBridge provides a mock function with given fields: ctx, in, opts
func (_m *LogicalBridgeServiceClient) GetLogicalBridge(ctx context.Context, in *_go.GetLogicalBridgeRequest, opts ...grpc.CallOption) (*_go.LogicalBridge, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *_go.LogicalBridge
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *_go.GetLogicalBridgeRequest, ...grpc.CallOption) (*_go.LogicalBridge, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *_go.GetLogicalBridgeRequest, ...grpc.CallOption) *_go.LogicalBridge); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*_go.LogicalBridge)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *_go.GetLogicalBridgeRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LogicalBridgeServiceClient_GetLogicalBridge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLogicalBridge'
type LogicalBridgeServiceClient_GetLogicalBridge_Call struct {
	*mock.Call
}

// GetLogicalBridge is a helper method to define mock.On call
//   - ctx context.Context
//   - in *_go.GetLogicalBridgeRequest
//   - opts ...grpc.CallOption
func (_e *LogicalBridgeServiceClient_Expecter) GetLogicalBridge(ctx interface{}, in interface{}, opts ...interface{}) *LogicalBridgeServiceClient_GetLogicalBridge_Call {
	return &LogicalBridgeServiceClient_GetLogicalBridge_Call{Call: _e.mock.On("GetLogicalBridge",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *LogicalBridgeServiceClient_GetLogicalBridge_Call) Run(run func(ctx context.Context, in *_go.GetLogicalBridgeRequest, opts ...grpc.CallOption)) *LogicalBridgeServiceClient_GetLogicalBridge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*_go.GetLogicalBridgeRequest), variadicArgs...)
	})
	return _c
}

func (_c *LogicalBridgeServiceClient_GetLogicalBridge_Call) Return(_a0 *_go.LogicalBridge, _a1 error) *LogicalBridgeServiceClient_GetLogicalBridge_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LogicalBridgeServiceClient_GetLogicalBridge_Call) RunAndReturn(run func(context.Context, *_go.GetLogicalBridgeRequest, ...grpc.CallOption) (*_go.LogicalBridge, error)) *LogicalBridgeServiceClient_GetLogicalBridge_Call {
	_c.Call.Return(run)
	return _c
}

// ListLogicalBridges provides a mock function with given fields: ctx, in, opts
func (_m *LogicalBridgeServiceClient) ListLogicalBridges(ctx context.Context, in *_go.ListLogicalBridgesRequest, opts ...grpc.CallOption) (*_go.ListLogicalBridgesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *_go.ListLogicalBridgesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *_go.ListLogicalBridgesRequest, ...grpc.CallOption) (*_go.ListLogicalBridgesResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *_go.ListLogicalBridgesRequest, ...grpc.CallOption) *_go.ListLogicalBridgesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*_go.ListLogicalBridgesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *_go.ListLogicalBridgesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LogicalBridgeServiceClient_ListLogicalBridges_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListLogicalBridges'
type LogicalBridgeServiceClient_ListLogicalBridges_Call struct {
	*mock.Call
}

// ListLogicalBridges is a helper method to define mock.On call
//   - ctx context.Context
//   - in *_go.ListLogicalBridgesRequest
//   - opts ...grpc.CallOption
func (_e *LogicalBridgeServiceClient_Expecter) ListLogicalBridges(ctx interface{}, in interface{}, opts ...interface{}) *LogicalBridgeServiceClient_ListLogicalBridges_Call {
	return &LogicalBridgeServiceClient_ListLogicalBridges_Call{Call: _e.mock.On("ListLogicalBridges",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *LogicalBridgeServiceClient_ListLogicalBridges_Call) Run(run func(ctx context.Context, in *_go.ListLogicalBridgesRequest, opts ...grpc.CallOption)) *LogicalBridgeServiceClient_ListLogicalBridges_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*_go.ListLogicalBridgesRequest), variadicArgs...)
	})
	return _c
}

func (_c *LogicalBridgeServiceClient_ListLogicalBridges_Call) Return(_a0 *_go.ListLogicalBridgesResponse, _a1 error) *LogicalBridgeServiceClient_ListLogicalBridges_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LogicalBridgeServiceClient_ListLogicalBridges_Call) RunAndReturn(run func(context.Context, *_go.ListLogicalBridgesRequest, ...grpc.CallOption) (*_go.ListLogicalBridgesResponse, error)) *LogicalBridgeServiceClient_ListLogicalBridges_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateLogicalBridge provides a mock function with given fields: ctx, in, opts
func (_m *LogicalBridgeServiceClient) UpdateLogicalBridge(ctx context.Context, in *_go.UpdateLogicalBridgeRequest, opts ...grpc.CallOption) (*_go.LogicalBridge, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *_go.LogicalBridge
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *_go.UpdateLogicalBridgeRequest, ...grpc.CallOption) (*_go.LogicalBridge, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *_go.UpdateLogicalBridgeRequest, ...grpc.CallOption) *_go.LogicalBridge); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*_go.LogicalBridge)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *_go.UpdateLogicalBridgeRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LogicalBridgeServiceClient_UpdateLogicalBridge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateLogicalBridge'
type LogicalBridgeServiceClient_UpdateLogicalBridge_Call struct {
	*mock.Call
}

// UpdateLogicalBridge is a helper method to define mock.On call
//   - ctx context.Context
//   - in *_go.UpdateLogicalBridgeRequest
//   - opts ...grpc.CallOption
func (_e *LogicalBridgeServiceClient_Expecter) UpdateLogicalBridge(ctx interface{}, in interface{}, opts ...interface{}) *LogicalBridgeServiceClient_UpdateLogicalBridge_Call {
	return &LogicalBridgeServiceClient_UpdateLogicalBridge_Call{Call: _e.mock.On("UpdateLogicalBridge",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *LogicalBridgeServiceClient_UpdateLogicalBridge_Call) Run(run func(ctx context.Context, in *_go.UpdateLogicalBridgeRequest, opts ...grpc.CallOption)) *LogicalBridgeServiceClient_UpdateLogicalBridge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*_go.UpdateLogicalBridgeRequest), variadicArgs...)
	})
	return _c
}

func (_c *LogicalBridgeServiceClient_UpdateLogicalBridge_Call) Return(_a0 *_go.LogicalBridge, _a1 error) *LogicalBridgeServiceClient_UpdateLogicalBridge_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LogicalBridgeServiceClient_UpdateLogicalBridge_Call) RunAndReturn(run func(context.Context, *_go.UpdateLogicalBridgeRequest, ...grpc.CallOption) (*_go.LogicalBridge, error)) *LogicalBridgeServiceClient_UpdateLogicalBridge_Call {
	_c.Call.Return(run)
	return _c
}

// NewLogicalBridgeServiceClient creates a new instance of LogicalBridgeServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLogicalBridgeServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *LogicalBridgeServiceClient {
	mock := &LogicalBridgeServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
