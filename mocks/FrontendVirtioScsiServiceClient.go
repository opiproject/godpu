/* SPDX-License-Identifier: Apache-2.0
   Copyright (c) 2023 Dell Inc, or its subsidiaries.
*/
// Code generated by mockery v2.33.1. DO NOT EDIT.

package mocks

import (
	context "context"

	_go "github.com/opiproject/opi-api/storage/v1alpha1/gen/go"

	emptypb "google.golang.org/protobuf/types/known/emptypb"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// FrontendVirtioScsiServiceClient is an autogenerated mock type for the FrontendVirtioScsiServiceClient type
type FrontendVirtioScsiServiceClient struct {
	mock.Mock
}

type FrontendVirtioScsiServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *FrontendVirtioScsiServiceClient) EXPECT() *FrontendVirtioScsiServiceClient_Expecter {
	return &FrontendVirtioScsiServiceClient_Expecter{mock: &_m.Mock}
}

// CreateVirtioScsiController provides a mock function with given fields: ctx, in, opts
func (_m *FrontendVirtioScsiServiceClient) CreateVirtioScsiController(ctx context.Context, in *_go.CreateVirtioScsiControllerRequest, opts ...grpc.CallOption) (*_go.VirtioScsiController, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *_go.VirtioScsiController
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *_go.CreateVirtioScsiControllerRequest, ...grpc.CallOption) (*_go.VirtioScsiController, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *_go.CreateVirtioScsiControllerRequest, ...grpc.CallOption) *_go.VirtioScsiController); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*_go.VirtioScsiController)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *_go.CreateVirtioScsiControllerRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FrontendVirtioScsiServiceClient_CreateVirtioScsiController_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateVirtioScsiController'
type FrontendVirtioScsiServiceClient_CreateVirtioScsiController_Call struct {
	*mock.Call
}

// CreateVirtioScsiController is a helper method to define mock.On call
//   - ctx context.Context
//   - in *_go.CreateVirtioScsiControllerRequest
//   - opts ...grpc.CallOption
func (_e *FrontendVirtioScsiServiceClient_Expecter) CreateVirtioScsiController(ctx interface{}, in interface{}, opts ...interface{}) *FrontendVirtioScsiServiceClient_CreateVirtioScsiController_Call {
	return &FrontendVirtioScsiServiceClient_CreateVirtioScsiController_Call{Call: _e.mock.On("CreateVirtioScsiController",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *FrontendVirtioScsiServiceClient_CreateVirtioScsiController_Call) Run(run func(ctx context.Context, in *_go.CreateVirtioScsiControllerRequest, opts ...grpc.CallOption)) *FrontendVirtioScsiServiceClient_CreateVirtioScsiController_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*_go.CreateVirtioScsiControllerRequest), variadicArgs...)
	})
	return _c
}

func (_c *FrontendVirtioScsiServiceClient_CreateVirtioScsiController_Call) Return(_a0 *_go.VirtioScsiController, _a1 error) *FrontendVirtioScsiServiceClient_CreateVirtioScsiController_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FrontendVirtioScsiServiceClient_CreateVirtioScsiController_Call) RunAndReturn(run func(context.Context, *_go.CreateVirtioScsiControllerRequest, ...grpc.CallOption) (*_go.VirtioScsiController, error)) *FrontendVirtioScsiServiceClient_CreateVirtioScsiController_Call {
	_c.Call.Return(run)
	return _c
}

// CreateVirtioScsiLun provides a mock function with given fields: ctx, in, opts
func (_m *FrontendVirtioScsiServiceClient) CreateVirtioScsiLun(ctx context.Context, in *_go.CreateVirtioScsiLunRequest, opts ...grpc.CallOption) (*_go.VirtioScsiLun, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *_go.VirtioScsiLun
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *_go.CreateVirtioScsiLunRequest, ...grpc.CallOption) (*_go.VirtioScsiLun, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *_go.CreateVirtioScsiLunRequest, ...grpc.CallOption) *_go.VirtioScsiLun); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*_go.VirtioScsiLun)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *_go.CreateVirtioScsiLunRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FrontendVirtioScsiServiceClient_CreateVirtioScsiLun_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateVirtioScsiLun'
type FrontendVirtioScsiServiceClient_CreateVirtioScsiLun_Call struct {
	*mock.Call
}

// CreateVirtioScsiLun is a helper method to define mock.On call
//   - ctx context.Context
//   - in *_go.CreateVirtioScsiLunRequest
//   - opts ...grpc.CallOption
func (_e *FrontendVirtioScsiServiceClient_Expecter) CreateVirtioScsiLun(ctx interface{}, in interface{}, opts ...interface{}) *FrontendVirtioScsiServiceClient_CreateVirtioScsiLun_Call {
	return &FrontendVirtioScsiServiceClient_CreateVirtioScsiLun_Call{Call: _e.mock.On("CreateVirtioScsiLun",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *FrontendVirtioScsiServiceClient_CreateVirtioScsiLun_Call) Run(run func(ctx context.Context, in *_go.CreateVirtioScsiLunRequest, opts ...grpc.CallOption)) *FrontendVirtioScsiServiceClient_CreateVirtioScsiLun_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*_go.CreateVirtioScsiLunRequest), variadicArgs...)
	})
	return _c
}

func (_c *FrontendVirtioScsiServiceClient_CreateVirtioScsiLun_Call) Return(_a0 *_go.VirtioScsiLun, _a1 error) *FrontendVirtioScsiServiceClient_CreateVirtioScsiLun_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FrontendVirtioScsiServiceClient_CreateVirtioScsiLun_Call) RunAndReturn(run func(context.Context, *_go.CreateVirtioScsiLunRequest, ...grpc.CallOption) (*_go.VirtioScsiLun, error)) *FrontendVirtioScsiServiceClient_CreateVirtioScsiLun_Call {
	_c.Call.Return(run)
	return _c
}

// CreateVirtioScsiTarget provides a mock function with given fields: ctx, in, opts
func (_m *FrontendVirtioScsiServiceClient) CreateVirtioScsiTarget(ctx context.Context, in *_go.CreateVirtioScsiTargetRequest, opts ...grpc.CallOption) (*_go.VirtioScsiTarget, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *_go.VirtioScsiTarget
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *_go.CreateVirtioScsiTargetRequest, ...grpc.CallOption) (*_go.VirtioScsiTarget, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *_go.CreateVirtioScsiTargetRequest, ...grpc.CallOption) *_go.VirtioScsiTarget); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*_go.VirtioScsiTarget)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *_go.CreateVirtioScsiTargetRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FrontendVirtioScsiServiceClient_CreateVirtioScsiTarget_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateVirtioScsiTarget'
type FrontendVirtioScsiServiceClient_CreateVirtioScsiTarget_Call struct {
	*mock.Call
}

// CreateVirtioScsiTarget is a helper method to define mock.On call
//   - ctx context.Context
//   - in *_go.CreateVirtioScsiTargetRequest
//   - opts ...grpc.CallOption
func (_e *FrontendVirtioScsiServiceClient_Expecter) CreateVirtioScsiTarget(ctx interface{}, in interface{}, opts ...interface{}) *FrontendVirtioScsiServiceClient_CreateVirtioScsiTarget_Call {
	return &FrontendVirtioScsiServiceClient_CreateVirtioScsiTarget_Call{Call: _e.mock.On("CreateVirtioScsiTarget",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *FrontendVirtioScsiServiceClient_CreateVirtioScsiTarget_Call) Run(run func(ctx context.Context, in *_go.CreateVirtioScsiTargetRequest, opts ...grpc.CallOption)) *FrontendVirtioScsiServiceClient_CreateVirtioScsiTarget_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*_go.CreateVirtioScsiTargetRequest), variadicArgs...)
	})
	return _c
}

func (_c *FrontendVirtioScsiServiceClient_CreateVirtioScsiTarget_Call) Return(_a0 *_go.VirtioScsiTarget, _a1 error) *FrontendVirtioScsiServiceClient_CreateVirtioScsiTarget_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FrontendVirtioScsiServiceClient_CreateVirtioScsiTarget_Call) RunAndReturn(run func(context.Context, *_go.CreateVirtioScsiTargetRequest, ...grpc.CallOption) (*_go.VirtioScsiTarget, error)) *FrontendVirtioScsiServiceClient_CreateVirtioScsiTarget_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteVirtioScsiController provides a mock function with given fields: ctx, in, opts
func (_m *FrontendVirtioScsiServiceClient) DeleteVirtioScsiController(ctx context.Context, in *_go.DeleteVirtioScsiControllerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *emptypb.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *_go.DeleteVirtioScsiControllerRequest, ...grpc.CallOption) (*emptypb.Empty, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *_go.DeleteVirtioScsiControllerRequest, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *_go.DeleteVirtioScsiControllerRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FrontendVirtioScsiServiceClient_DeleteVirtioScsiController_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteVirtioScsiController'
type FrontendVirtioScsiServiceClient_DeleteVirtioScsiController_Call struct {
	*mock.Call
}

// DeleteVirtioScsiController is a helper method to define mock.On call
//   - ctx context.Context
//   - in *_go.DeleteVirtioScsiControllerRequest
//   - opts ...grpc.CallOption
func (_e *FrontendVirtioScsiServiceClient_Expecter) DeleteVirtioScsiController(ctx interface{}, in interface{}, opts ...interface{}) *FrontendVirtioScsiServiceClient_DeleteVirtioScsiController_Call {
	return &FrontendVirtioScsiServiceClient_DeleteVirtioScsiController_Call{Call: _e.mock.On("DeleteVirtioScsiController",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *FrontendVirtioScsiServiceClient_DeleteVirtioScsiController_Call) Run(run func(ctx context.Context, in *_go.DeleteVirtioScsiControllerRequest, opts ...grpc.CallOption)) *FrontendVirtioScsiServiceClient_DeleteVirtioScsiController_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*_go.DeleteVirtioScsiControllerRequest), variadicArgs...)
	})
	return _c
}

func (_c *FrontendVirtioScsiServiceClient_DeleteVirtioScsiController_Call) Return(_a0 *emptypb.Empty, _a1 error) *FrontendVirtioScsiServiceClient_DeleteVirtioScsiController_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FrontendVirtioScsiServiceClient_DeleteVirtioScsiController_Call) RunAndReturn(run func(context.Context, *_go.DeleteVirtioScsiControllerRequest, ...grpc.CallOption) (*emptypb.Empty, error)) *FrontendVirtioScsiServiceClient_DeleteVirtioScsiController_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteVirtioScsiLun provides a mock function with given fields: ctx, in, opts
func (_m *FrontendVirtioScsiServiceClient) DeleteVirtioScsiLun(ctx context.Context, in *_go.DeleteVirtioScsiLunRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *emptypb.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *_go.DeleteVirtioScsiLunRequest, ...grpc.CallOption) (*emptypb.Empty, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *_go.DeleteVirtioScsiLunRequest, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *_go.DeleteVirtioScsiLunRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FrontendVirtioScsiServiceClient_DeleteVirtioScsiLun_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteVirtioScsiLun'
type FrontendVirtioScsiServiceClient_DeleteVirtioScsiLun_Call struct {
	*mock.Call
}

// DeleteVirtioScsiLun is a helper method to define mock.On call
//   - ctx context.Context
//   - in *_go.DeleteVirtioScsiLunRequest
//   - opts ...grpc.CallOption
func (_e *FrontendVirtioScsiServiceClient_Expecter) DeleteVirtioScsiLun(ctx interface{}, in interface{}, opts ...interface{}) *FrontendVirtioScsiServiceClient_DeleteVirtioScsiLun_Call {
	return &FrontendVirtioScsiServiceClient_DeleteVirtioScsiLun_Call{Call: _e.mock.On("DeleteVirtioScsiLun",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *FrontendVirtioScsiServiceClient_DeleteVirtioScsiLun_Call) Run(run func(ctx context.Context, in *_go.DeleteVirtioScsiLunRequest, opts ...grpc.CallOption)) *FrontendVirtioScsiServiceClient_DeleteVirtioScsiLun_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*_go.DeleteVirtioScsiLunRequest), variadicArgs...)
	})
	return _c
}

func (_c *FrontendVirtioScsiServiceClient_DeleteVirtioScsiLun_Call) Return(_a0 *emptypb.Empty, _a1 error) *FrontendVirtioScsiServiceClient_DeleteVirtioScsiLun_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FrontendVirtioScsiServiceClient_DeleteVirtioScsiLun_Call) RunAndReturn(run func(context.Context, *_go.DeleteVirtioScsiLunRequest, ...grpc.CallOption) (*emptypb.Empty, error)) *FrontendVirtioScsiServiceClient_DeleteVirtioScsiLun_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteVirtioScsiTarget provides a mock function with given fields: ctx, in, opts
func (_m *FrontendVirtioScsiServiceClient) DeleteVirtioScsiTarget(ctx context.Context, in *_go.DeleteVirtioScsiTargetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *emptypb.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *_go.DeleteVirtioScsiTargetRequest, ...grpc.CallOption) (*emptypb.Empty, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *_go.DeleteVirtioScsiTargetRequest, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *_go.DeleteVirtioScsiTargetRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FrontendVirtioScsiServiceClient_DeleteVirtioScsiTarget_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteVirtioScsiTarget'
type FrontendVirtioScsiServiceClient_DeleteVirtioScsiTarget_Call struct {
	*mock.Call
}

// DeleteVirtioScsiTarget is a helper method to define mock.On call
//   - ctx context.Context
//   - in *_go.DeleteVirtioScsiTargetRequest
//   - opts ...grpc.CallOption
func (_e *FrontendVirtioScsiServiceClient_Expecter) DeleteVirtioScsiTarget(ctx interface{}, in interface{}, opts ...interface{}) *FrontendVirtioScsiServiceClient_DeleteVirtioScsiTarget_Call {
	return &FrontendVirtioScsiServiceClient_DeleteVirtioScsiTarget_Call{Call: _e.mock.On("DeleteVirtioScsiTarget",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *FrontendVirtioScsiServiceClient_DeleteVirtioScsiTarget_Call) Run(run func(ctx context.Context, in *_go.DeleteVirtioScsiTargetRequest, opts ...grpc.CallOption)) *FrontendVirtioScsiServiceClient_DeleteVirtioScsiTarget_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*_go.DeleteVirtioScsiTargetRequest), variadicArgs...)
	})
	return _c
}

func (_c *FrontendVirtioScsiServiceClient_DeleteVirtioScsiTarget_Call) Return(_a0 *emptypb.Empty, _a1 error) *FrontendVirtioScsiServiceClient_DeleteVirtioScsiTarget_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FrontendVirtioScsiServiceClient_DeleteVirtioScsiTarget_Call) RunAndReturn(run func(context.Context, *_go.DeleteVirtioScsiTargetRequest, ...grpc.CallOption) (*emptypb.Empty, error)) *FrontendVirtioScsiServiceClient_DeleteVirtioScsiTarget_Call {
	_c.Call.Return(run)
	return _c
}

// GetVirtioScsiController provides a mock function with given fields: ctx, in, opts
func (_m *FrontendVirtioScsiServiceClient) GetVirtioScsiController(ctx context.Context, in *_go.GetVirtioScsiControllerRequest, opts ...grpc.CallOption) (*_go.VirtioScsiController, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *_go.VirtioScsiController
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *_go.GetVirtioScsiControllerRequest, ...grpc.CallOption) (*_go.VirtioScsiController, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *_go.GetVirtioScsiControllerRequest, ...grpc.CallOption) *_go.VirtioScsiController); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*_go.VirtioScsiController)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *_go.GetVirtioScsiControllerRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FrontendVirtioScsiServiceClient_GetVirtioScsiController_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVirtioScsiController'
type FrontendVirtioScsiServiceClient_GetVirtioScsiController_Call struct {
	*mock.Call
}

// GetVirtioScsiController is a helper method to define mock.On call
//   - ctx context.Context
//   - in *_go.GetVirtioScsiControllerRequest
//   - opts ...grpc.CallOption
func (_e *FrontendVirtioScsiServiceClient_Expecter) GetVirtioScsiController(ctx interface{}, in interface{}, opts ...interface{}) *FrontendVirtioScsiServiceClient_GetVirtioScsiController_Call {
	return &FrontendVirtioScsiServiceClient_GetVirtioScsiController_Call{Call: _e.mock.On("GetVirtioScsiController",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *FrontendVirtioScsiServiceClient_GetVirtioScsiController_Call) Run(run func(ctx context.Context, in *_go.GetVirtioScsiControllerRequest, opts ...grpc.CallOption)) *FrontendVirtioScsiServiceClient_GetVirtioScsiController_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*_go.GetVirtioScsiControllerRequest), variadicArgs...)
	})
	return _c
}

func (_c *FrontendVirtioScsiServiceClient_GetVirtioScsiController_Call) Return(_a0 *_go.VirtioScsiController, _a1 error) *FrontendVirtioScsiServiceClient_GetVirtioScsiController_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FrontendVirtioScsiServiceClient_GetVirtioScsiController_Call) RunAndReturn(run func(context.Context, *_go.GetVirtioScsiControllerRequest, ...grpc.CallOption) (*_go.VirtioScsiController, error)) *FrontendVirtioScsiServiceClient_GetVirtioScsiController_Call {
	_c.Call.Return(run)
	return _c
}

// GetVirtioScsiLun provides a mock function with given fields: ctx, in, opts
func (_m *FrontendVirtioScsiServiceClient) GetVirtioScsiLun(ctx context.Context, in *_go.GetVirtioScsiLunRequest, opts ...grpc.CallOption) (*_go.VirtioScsiLun, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *_go.VirtioScsiLun
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *_go.GetVirtioScsiLunRequest, ...grpc.CallOption) (*_go.VirtioScsiLun, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *_go.GetVirtioScsiLunRequest, ...grpc.CallOption) *_go.VirtioScsiLun); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*_go.VirtioScsiLun)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *_go.GetVirtioScsiLunRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FrontendVirtioScsiServiceClient_GetVirtioScsiLun_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVirtioScsiLun'
type FrontendVirtioScsiServiceClient_GetVirtioScsiLun_Call struct {
	*mock.Call
}

// GetVirtioScsiLun is a helper method to define mock.On call
//   - ctx context.Context
//   - in *_go.GetVirtioScsiLunRequest
//   - opts ...grpc.CallOption
func (_e *FrontendVirtioScsiServiceClient_Expecter) GetVirtioScsiLun(ctx interface{}, in interface{}, opts ...interface{}) *FrontendVirtioScsiServiceClient_GetVirtioScsiLun_Call {
	return &FrontendVirtioScsiServiceClient_GetVirtioScsiLun_Call{Call: _e.mock.On("GetVirtioScsiLun",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *FrontendVirtioScsiServiceClient_GetVirtioScsiLun_Call) Run(run func(ctx context.Context, in *_go.GetVirtioScsiLunRequest, opts ...grpc.CallOption)) *FrontendVirtioScsiServiceClient_GetVirtioScsiLun_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*_go.GetVirtioScsiLunRequest), variadicArgs...)
	})
	return _c
}

func (_c *FrontendVirtioScsiServiceClient_GetVirtioScsiLun_Call) Return(_a0 *_go.VirtioScsiLun, _a1 error) *FrontendVirtioScsiServiceClient_GetVirtioScsiLun_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FrontendVirtioScsiServiceClient_GetVirtioScsiLun_Call) RunAndReturn(run func(context.Context, *_go.GetVirtioScsiLunRequest, ...grpc.CallOption) (*_go.VirtioScsiLun, error)) *FrontendVirtioScsiServiceClient_GetVirtioScsiLun_Call {
	_c.Call.Return(run)
	return _c
}

// GetVirtioScsiTarget provides a mock function with given fields: ctx, in, opts
func (_m *FrontendVirtioScsiServiceClient) GetVirtioScsiTarget(ctx context.Context, in *_go.GetVirtioScsiTargetRequest, opts ...grpc.CallOption) (*_go.VirtioScsiTarget, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *_go.VirtioScsiTarget
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *_go.GetVirtioScsiTargetRequest, ...grpc.CallOption) (*_go.VirtioScsiTarget, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *_go.GetVirtioScsiTargetRequest, ...grpc.CallOption) *_go.VirtioScsiTarget); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*_go.VirtioScsiTarget)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *_go.GetVirtioScsiTargetRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FrontendVirtioScsiServiceClient_GetVirtioScsiTarget_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVirtioScsiTarget'
type FrontendVirtioScsiServiceClient_GetVirtioScsiTarget_Call struct {
	*mock.Call
}

// GetVirtioScsiTarget is a helper method to define mock.On call
//   - ctx context.Context
//   - in *_go.GetVirtioScsiTargetRequest
//   - opts ...grpc.CallOption
func (_e *FrontendVirtioScsiServiceClient_Expecter) GetVirtioScsiTarget(ctx interface{}, in interface{}, opts ...interface{}) *FrontendVirtioScsiServiceClient_GetVirtioScsiTarget_Call {
	return &FrontendVirtioScsiServiceClient_GetVirtioScsiTarget_Call{Call: _e.mock.On("GetVirtioScsiTarget",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *FrontendVirtioScsiServiceClient_GetVirtioScsiTarget_Call) Run(run func(ctx context.Context, in *_go.GetVirtioScsiTargetRequest, opts ...grpc.CallOption)) *FrontendVirtioScsiServiceClient_GetVirtioScsiTarget_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*_go.GetVirtioScsiTargetRequest), variadicArgs...)
	})
	return _c
}

func (_c *FrontendVirtioScsiServiceClient_GetVirtioScsiTarget_Call) Return(_a0 *_go.VirtioScsiTarget, _a1 error) *FrontendVirtioScsiServiceClient_GetVirtioScsiTarget_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FrontendVirtioScsiServiceClient_GetVirtioScsiTarget_Call) RunAndReturn(run func(context.Context, *_go.GetVirtioScsiTargetRequest, ...grpc.CallOption) (*_go.VirtioScsiTarget, error)) *FrontendVirtioScsiServiceClient_GetVirtioScsiTarget_Call {
	_c.Call.Return(run)
	return _c
}

// ListVirtioScsiControllers provides a mock function with given fields: ctx, in, opts
func (_m *FrontendVirtioScsiServiceClient) ListVirtioScsiControllers(ctx context.Context, in *_go.ListVirtioScsiControllersRequest, opts ...grpc.CallOption) (*_go.ListVirtioScsiControllersResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *_go.ListVirtioScsiControllersResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *_go.ListVirtioScsiControllersRequest, ...grpc.CallOption) (*_go.ListVirtioScsiControllersResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *_go.ListVirtioScsiControllersRequest, ...grpc.CallOption) *_go.ListVirtioScsiControllersResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*_go.ListVirtioScsiControllersResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *_go.ListVirtioScsiControllersRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FrontendVirtioScsiServiceClient_ListVirtioScsiControllers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListVirtioScsiControllers'
type FrontendVirtioScsiServiceClient_ListVirtioScsiControllers_Call struct {
	*mock.Call
}

// ListVirtioScsiControllers is a helper method to define mock.On call
//   - ctx context.Context
//   - in *_go.ListVirtioScsiControllersRequest
//   - opts ...grpc.CallOption
func (_e *FrontendVirtioScsiServiceClient_Expecter) ListVirtioScsiControllers(ctx interface{}, in interface{}, opts ...interface{}) *FrontendVirtioScsiServiceClient_ListVirtioScsiControllers_Call {
	return &FrontendVirtioScsiServiceClient_ListVirtioScsiControllers_Call{Call: _e.mock.On("ListVirtioScsiControllers",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *FrontendVirtioScsiServiceClient_ListVirtioScsiControllers_Call) Run(run func(ctx context.Context, in *_go.ListVirtioScsiControllersRequest, opts ...grpc.CallOption)) *FrontendVirtioScsiServiceClient_ListVirtioScsiControllers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*_go.ListVirtioScsiControllersRequest), variadicArgs...)
	})
	return _c
}

func (_c *FrontendVirtioScsiServiceClient_ListVirtioScsiControllers_Call) Return(_a0 *_go.ListVirtioScsiControllersResponse, _a1 error) *FrontendVirtioScsiServiceClient_ListVirtioScsiControllers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FrontendVirtioScsiServiceClient_ListVirtioScsiControllers_Call) RunAndReturn(run func(context.Context, *_go.ListVirtioScsiControllersRequest, ...grpc.CallOption) (*_go.ListVirtioScsiControllersResponse, error)) *FrontendVirtioScsiServiceClient_ListVirtioScsiControllers_Call {
	_c.Call.Return(run)
	return _c
}

// ListVirtioScsiLuns provides a mock function with given fields: ctx, in, opts
func (_m *FrontendVirtioScsiServiceClient) ListVirtioScsiLuns(ctx context.Context, in *_go.ListVirtioScsiLunsRequest, opts ...grpc.CallOption) (*_go.ListVirtioScsiLunsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *_go.ListVirtioScsiLunsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *_go.ListVirtioScsiLunsRequest, ...grpc.CallOption) (*_go.ListVirtioScsiLunsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *_go.ListVirtioScsiLunsRequest, ...grpc.CallOption) *_go.ListVirtioScsiLunsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*_go.ListVirtioScsiLunsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *_go.ListVirtioScsiLunsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FrontendVirtioScsiServiceClient_ListVirtioScsiLuns_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListVirtioScsiLuns'
type FrontendVirtioScsiServiceClient_ListVirtioScsiLuns_Call struct {
	*mock.Call
}

// ListVirtioScsiLuns is a helper method to define mock.On call
//   - ctx context.Context
//   - in *_go.ListVirtioScsiLunsRequest
//   - opts ...grpc.CallOption
func (_e *FrontendVirtioScsiServiceClient_Expecter) ListVirtioScsiLuns(ctx interface{}, in interface{}, opts ...interface{}) *FrontendVirtioScsiServiceClient_ListVirtioScsiLuns_Call {
	return &FrontendVirtioScsiServiceClient_ListVirtioScsiLuns_Call{Call: _e.mock.On("ListVirtioScsiLuns",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *FrontendVirtioScsiServiceClient_ListVirtioScsiLuns_Call) Run(run func(ctx context.Context, in *_go.ListVirtioScsiLunsRequest, opts ...grpc.CallOption)) *FrontendVirtioScsiServiceClient_ListVirtioScsiLuns_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*_go.ListVirtioScsiLunsRequest), variadicArgs...)
	})
	return _c
}

func (_c *FrontendVirtioScsiServiceClient_ListVirtioScsiLuns_Call) Return(_a0 *_go.ListVirtioScsiLunsResponse, _a1 error) *FrontendVirtioScsiServiceClient_ListVirtioScsiLuns_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FrontendVirtioScsiServiceClient_ListVirtioScsiLuns_Call) RunAndReturn(run func(context.Context, *_go.ListVirtioScsiLunsRequest, ...grpc.CallOption) (*_go.ListVirtioScsiLunsResponse, error)) *FrontendVirtioScsiServiceClient_ListVirtioScsiLuns_Call {
	_c.Call.Return(run)
	return _c
}

// ListVirtioScsiTargets provides a mock function with given fields: ctx, in, opts
func (_m *FrontendVirtioScsiServiceClient) ListVirtioScsiTargets(ctx context.Context, in *_go.ListVirtioScsiTargetsRequest, opts ...grpc.CallOption) (*_go.ListVirtioScsiTargetsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *_go.ListVirtioScsiTargetsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *_go.ListVirtioScsiTargetsRequest, ...grpc.CallOption) (*_go.ListVirtioScsiTargetsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *_go.ListVirtioScsiTargetsRequest, ...grpc.CallOption) *_go.ListVirtioScsiTargetsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*_go.ListVirtioScsiTargetsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *_go.ListVirtioScsiTargetsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FrontendVirtioScsiServiceClient_ListVirtioScsiTargets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListVirtioScsiTargets'
type FrontendVirtioScsiServiceClient_ListVirtioScsiTargets_Call struct {
	*mock.Call
}

// ListVirtioScsiTargets is a helper method to define mock.On call
//   - ctx context.Context
//   - in *_go.ListVirtioScsiTargetsRequest
//   - opts ...grpc.CallOption
func (_e *FrontendVirtioScsiServiceClient_Expecter) ListVirtioScsiTargets(ctx interface{}, in interface{}, opts ...interface{}) *FrontendVirtioScsiServiceClient_ListVirtioScsiTargets_Call {
	return &FrontendVirtioScsiServiceClient_ListVirtioScsiTargets_Call{Call: _e.mock.On("ListVirtioScsiTargets",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *FrontendVirtioScsiServiceClient_ListVirtioScsiTargets_Call) Run(run func(ctx context.Context, in *_go.ListVirtioScsiTargetsRequest, opts ...grpc.CallOption)) *FrontendVirtioScsiServiceClient_ListVirtioScsiTargets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*_go.ListVirtioScsiTargetsRequest), variadicArgs...)
	})
	return _c
}

func (_c *FrontendVirtioScsiServiceClient_ListVirtioScsiTargets_Call) Return(_a0 *_go.ListVirtioScsiTargetsResponse, _a1 error) *FrontendVirtioScsiServiceClient_ListVirtioScsiTargets_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FrontendVirtioScsiServiceClient_ListVirtioScsiTargets_Call) RunAndReturn(run func(context.Context, *_go.ListVirtioScsiTargetsRequest, ...grpc.CallOption) (*_go.ListVirtioScsiTargetsResponse, error)) *FrontendVirtioScsiServiceClient_ListVirtioScsiTargets_Call {
	_c.Call.Return(run)
	return _c
}

// StatsVirtioScsiController provides a mock function with given fields: ctx, in, opts
func (_m *FrontendVirtioScsiServiceClient) StatsVirtioScsiController(ctx context.Context, in *_go.StatsVirtioScsiControllerRequest, opts ...grpc.CallOption) (*_go.StatsVirtioScsiControllerResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *_go.StatsVirtioScsiControllerResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *_go.StatsVirtioScsiControllerRequest, ...grpc.CallOption) (*_go.StatsVirtioScsiControllerResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *_go.StatsVirtioScsiControllerRequest, ...grpc.CallOption) *_go.StatsVirtioScsiControllerResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*_go.StatsVirtioScsiControllerResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *_go.StatsVirtioScsiControllerRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FrontendVirtioScsiServiceClient_StatsVirtioScsiController_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StatsVirtioScsiController'
type FrontendVirtioScsiServiceClient_StatsVirtioScsiController_Call struct {
	*mock.Call
}

// StatsVirtioScsiController is a helper method to define mock.On call
//   - ctx context.Context
//   - in *_go.StatsVirtioScsiControllerRequest
//   - opts ...grpc.CallOption
func (_e *FrontendVirtioScsiServiceClient_Expecter) StatsVirtioScsiController(ctx interface{}, in interface{}, opts ...interface{}) *FrontendVirtioScsiServiceClient_StatsVirtioScsiController_Call {
	return &FrontendVirtioScsiServiceClient_StatsVirtioScsiController_Call{Call: _e.mock.On("StatsVirtioScsiController",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *FrontendVirtioScsiServiceClient_StatsVirtioScsiController_Call) Run(run func(ctx context.Context, in *_go.StatsVirtioScsiControllerRequest, opts ...grpc.CallOption)) *FrontendVirtioScsiServiceClient_StatsVirtioScsiController_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*_go.StatsVirtioScsiControllerRequest), variadicArgs...)
	})
	return _c
}

func (_c *FrontendVirtioScsiServiceClient_StatsVirtioScsiController_Call) Return(_a0 *_go.StatsVirtioScsiControllerResponse, _a1 error) *FrontendVirtioScsiServiceClient_StatsVirtioScsiController_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FrontendVirtioScsiServiceClient_StatsVirtioScsiController_Call) RunAndReturn(run func(context.Context, *_go.StatsVirtioScsiControllerRequest, ...grpc.CallOption) (*_go.StatsVirtioScsiControllerResponse, error)) *FrontendVirtioScsiServiceClient_StatsVirtioScsiController_Call {
	_c.Call.Return(run)
	return _c
}

// StatsVirtioScsiLun provides a mock function with given fields: ctx, in, opts
func (_m *FrontendVirtioScsiServiceClient) StatsVirtioScsiLun(ctx context.Context, in *_go.StatsVirtioScsiLunRequest, opts ...grpc.CallOption) (*_go.StatsVirtioScsiLunResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *_go.StatsVirtioScsiLunResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *_go.StatsVirtioScsiLunRequest, ...grpc.CallOption) (*_go.StatsVirtioScsiLunResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *_go.StatsVirtioScsiLunRequest, ...grpc.CallOption) *_go.StatsVirtioScsiLunResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*_go.StatsVirtioScsiLunResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *_go.StatsVirtioScsiLunRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FrontendVirtioScsiServiceClient_StatsVirtioScsiLun_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StatsVirtioScsiLun'
type FrontendVirtioScsiServiceClient_StatsVirtioScsiLun_Call struct {
	*mock.Call
}

// StatsVirtioScsiLun is a helper method to define mock.On call
//   - ctx context.Context
//   - in *_go.StatsVirtioScsiLunRequest
//   - opts ...grpc.CallOption
func (_e *FrontendVirtioScsiServiceClient_Expecter) StatsVirtioScsiLun(ctx interface{}, in interface{}, opts ...interface{}) *FrontendVirtioScsiServiceClient_StatsVirtioScsiLun_Call {
	return &FrontendVirtioScsiServiceClient_StatsVirtioScsiLun_Call{Call: _e.mock.On("StatsVirtioScsiLun",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *FrontendVirtioScsiServiceClient_StatsVirtioScsiLun_Call) Run(run func(ctx context.Context, in *_go.StatsVirtioScsiLunRequest, opts ...grpc.CallOption)) *FrontendVirtioScsiServiceClient_StatsVirtioScsiLun_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*_go.StatsVirtioScsiLunRequest), variadicArgs...)
	})
	return _c
}

func (_c *FrontendVirtioScsiServiceClient_StatsVirtioScsiLun_Call) Return(_a0 *_go.StatsVirtioScsiLunResponse, _a1 error) *FrontendVirtioScsiServiceClient_StatsVirtioScsiLun_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FrontendVirtioScsiServiceClient_StatsVirtioScsiLun_Call) RunAndReturn(run func(context.Context, *_go.StatsVirtioScsiLunRequest, ...grpc.CallOption) (*_go.StatsVirtioScsiLunResponse, error)) *FrontendVirtioScsiServiceClient_StatsVirtioScsiLun_Call {
	_c.Call.Return(run)
	return _c
}

// StatsVirtioScsiTarget provides a mock function with given fields: ctx, in, opts
func (_m *FrontendVirtioScsiServiceClient) StatsVirtioScsiTarget(ctx context.Context, in *_go.StatsVirtioScsiTargetRequest, opts ...grpc.CallOption) (*_go.StatsVirtioScsiTargetResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *_go.StatsVirtioScsiTargetResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *_go.StatsVirtioScsiTargetRequest, ...grpc.CallOption) (*_go.StatsVirtioScsiTargetResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *_go.StatsVirtioScsiTargetRequest, ...grpc.CallOption) *_go.StatsVirtioScsiTargetResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*_go.StatsVirtioScsiTargetResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *_go.StatsVirtioScsiTargetRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FrontendVirtioScsiServiceClient_StatsVirtioScsiTarget_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StatsVirtioScsiTarget'
type FrontendVirtioScsiServiceClient_StatsVirtioScsiTarget_Call struct {
	*mock.Call
}

// StatsVirtioScsiTarget is a helper method to define mock.On call
//   - ctx context.Context
//   - in *_go.StatsVirtioScsiTargetRequest
//   - opts ...grpc.CallOption
func (_e *FrontendVirtioScsiServiceClient_Expecter) StatsVirtioScsiTarget(ctx interface{}, in interface{}, opts ...interface{}) *FrontendVirtioScsiServiceClient_StatsVirtioScsiTarget_Call {
	return &FrontendVirtioScsiServiceClient_StatsVirtioScsiTarget_Call{Call: _e.mock.On("StatsVirtioScsiTarget",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *FrontendVirtioScsiServiceClient_StatsVirtioScsiTarget_Call) Run(run func(ctx context.Context, in *_go.StatsVirtioScsiTargetRequest, opts ...grpc.CallOption)) *FrontendVirtioScsiServiceClient_StatsVirtioScsiTarget_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*_go.StatsVirtioScsiTargetRequest), variadicArgs...)
	})
	return _c
}

func (_c *FrontendVirtioScsiServiceClient_StatsVirtioScsiTarget_Call) Return(_a0 *_go.StatsVirtioScsiTargetResponse, _a1 error) *FrontendVirtioScsiServiceClient_StatsVirtioScsiTarget_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FrontendVirtioScsiServiceClient_StatsVirtioScsiTarget_Call) RunAndReturn(run func(context.Context, *_go.StatsVirtioScsiTargetRequest, ...grpc.CallOption) (*_go.StatsVirtioScsiTargetResponse, error)) *FrontendVirtioScsiServiceClient_StatsVirtioScsiTarget_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateVirtioScsiController provides a mock function with given fields: ctx, in, opts
func (_m *FrontendVirtioScsiServiceClient) UpdateVirtioScsiController(ctx context.Context, in *_go.UpdateVirtioScsiControllerRequest, opts ...grpc.CallOption) (*_go.VirtioScsiController, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *_go.VirtioScsiController
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *_go.UpdateVirtioScsiControllerRequest, ...grpc.CallOption) (*_go.VirtioScsiController, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *_go.UpdateVirtioScsiControllerRequest, ...grpc.CallOption) *_go.VirtioScsiController); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*_go.VirtioScsiController)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *_go.UpdateVirtioScsiControllerRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FrontendVirtioScsiServiceClient_UpdateVirtioScsiController_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateVirtioScsiController'
type FrontendVirtioScsiServiceClient_UpdateVirtioScsiController_Call struct {
	*mock.Call
}

// UpdateVirtioScsiController is a helper method to define mock.On call
//   - ctx context.Context
//   - in *_go.UpdateVirtioScsiControllerRequest
//   - opts ...grpc.CallOption
func (_e *FrontendVirtioScsiServiceClient_Expecter) UpdateVirtioScsiController(ctx interface{}, in interface{}, opts ...interface{}) *FrontendVirtioScsiServiceClient_UpdateVirtioScsiController_Call {
	return &FrontendVirtioScsiServiceClient_UpdateVirtioScsiController_Call{Call: _e.mock.On("UpdateVirtioScsiController",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *FrontendVirtioScsiServiceClient_UpdateVirtioScsiController_Call) Run(run func(ctx context.Context, in *_go.UpdateVirtioScsiControllerRequest, opts ...grpc.CallOption)) *FrontendVirtioScsiServiceClient_UpdateVirtioScsiController_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*_go.UpdateVirtioScsiControllerRequest), variadicArgs...)
	})
	return _c
}

func (_c *FrontendVirtioScsiServiceClient_UpdateVirtioScsiController_Call) Return(_a0 *_go.VirtioScsiController, _a1 error) *FrontendVirtioScsiServiceClient_UpdateVirtioScsiController_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FrontendVirtioScsiServiceClient_UpdateVirtioScsiController_Call) RunAndReturn(run func(context.Context, *_go.UpdateVirtioScsiControllerRequest, ...grpc.CallOption) (*_go.VirtioScsiController, error)) *FrontendVirtioScsiServiceClient_UpdateVirtioScsiController_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateVirtioScsiLun provides a mock function with given fields: ctx, in, opts
func (_m *FrontendVirtioScsiServiceClient) UpdateVirtioScsiLun(ctx context.Context, in *_go.UpdateVirtioScsiLunRequest, opts ...grpc.CallOption) (*_go.VirtioScsiLun, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *_go.VirtioScsiLun
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *_go.UpdateVirtioScsiLunRequest, ...grpc.CallOption) (*_go.VirtioScsiLun, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *_go.UpdateVirtioScsiLunRequest, ...grpc.CallOption) *_go.VirtioScsiLun); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*_go.VirtioScsiLun)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *_go.UpdateVirtioScsiLunRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FrontendVirtioScsiServiceClient_UpdateVirtioScsiLun_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateVirtioScsiLun'
type FrontendVirtioScsiServiceClient_UpdateVirtioScsiLun_Call struct {
	*mock.Call
}

// UpdateVirtioScsiLun is a helper method to define mock.On call
//   - ctx context.Context
//   - in *_go.UpdateVirtioScsiLunRequest
//   - opts ...grpc.CallOption
func (_e *FrontendVirtioScsiServiceClient_Expecter) UpdateVirtioScsiLun(ctx interface{}, in interface{}, opts ...interface{}) *FrontendVirtioScsiServiceClient_UpdateVirtioScsiLun_Call {
	return &FrontendVirtioScsiServiceClient_UpdateVirtioScsiLun_Call{Call: _e.mock.On("UpdateVirtioScsiLun",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *FrontendVirtioScsiServiceClient_UpdateVirtioScsiLun_Call) Run(run func(ctx context.Context, in *_go.UpdateVirtioScsiLunRequest, opts ...grpc.CallOption)) *FrontendVirtioScsiServiceClient_UpdateVirtioScsiLun_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*_go.UpdateVirtioScsiLunRequest), variadicArgs...)
	})
	return _c
}

func (_c *FrontendVirtioScsiServiceClient_UpdateVirtioScsiLun_Call) Return(_a0 *_go.VirtioScsiLun, _a1 error) *FrontendVirtioScsiServiceClient_UpdateVirtioScsiLun_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FrontendVirtioScsiServiceClient_UpdateVirtioScsiLun_Call) RunAndReturn(run func(context.Context, *_go.UpdateVirtioScsiLunRequest, ...grpc.CallOption) (*_go.VirtioScsiLun, error)) *FrontendVirtioScsiServiceClient_UpdateVirtioScsiLun_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateVirtioScsiTarget provides a mock function with given fields: ctx, in, opts
func (_m *FrontendVirtioScsiServiceClient) UpdateVirtioScsiTarget(ctx context.Context, in *_go.UpdateVirtioScsiTargetRequest, opts ...grpc.CallOption) (*_go.VirtioScsiTarget, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *_go.VirtioScsiTarget
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *_go.UpdateVirtioScsiTargetRequest, ...grpc.CallOption) (*_go.VirtioScsiTarget, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *_go.UpdateVirtioScsiTargetRequest, ...grpc.CallOption) *_go.VirtioScsiTarget); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*_go.VirtioScsiTarget)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *_go.UpdateVirtioScsiTargetRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FrontendVirtioScsiServiceClient_UpdateVirtioScsiTarget_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateVirtioScsiTarget'
type FrontendVirtioScsiServiceClient_UpdateVirtioScsiTarget_Call struct {
	*mock.Call
}

// UpdateVirtioScsiTarget is a helper method to define mock.On call
//   - ctx context.Context
//   - in *_go.UpdateVirtioScsiTargetRequest
//   - opts ...grpc.CallOption
func (_e *FrontendVirtioScsiServiceClient_Expecter) UpdateVirtioScsiTarget(ctx interface{}, in interface{}, opts ...interface{}) *FrontendVirtioScsiServiceClient_UpdateVirtioScsiTarget_Call {
	return &FrontendVirtioScsiServiceClient_UpdateVirtioScsiTarget_Call{Call: _e.mock.On("UpdateVirtioScsiTarget",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *FrontendVirtioScsiServiceClient_UpdateVirtioScsiTarget_Call) Run(run func(ctx context.Context, in *_go.UpdateVirtioScsiTargetRequest, opts ...grpc.CallOption)) *FrontendVirtioScsiServiceClient_UpdateVirtioScsiTarget_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*_go.UpdateVirtioScsiTargetRequest), variadicArgs...)
	})
	return _c
}

func (_c *FrontendVirtioScsiServiceClient_UpdateVirtioScsiTarget_Call) Return(_a0 *_go.VirtioScsiTarget, _a1 error) *FrontendVirtioScsiServiceClient_UpdateVirtioScsiTarget_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FrontendVirtioScsiServiceClient_UpdateVirtioScsiTarget_Call) RunAndReturn(run func(context.Context, *_go.UpdateVirtioScsiTargetRequest, ...grpc.CallOption) (*_go.VirtioScsiTarget, error)) *FrontendVirtioScsiServiceClient_UpdateVirtioScsiTarget_Call {
	_c.Call.Return(run)
	return _c
}

// NewFrontendVirtioScsiServiceClient creates a new instance of FrontendVirtioScsiServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFrontendVirtioScsiServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *FrontendVirtioScsiServiceClient {
	mock := &FrontendVirtioScsiServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
