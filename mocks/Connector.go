/* SPDX-License-Identifier: Apache-2.0
   Copyright (c) 2023 Dell Inc, or its subsidiaries.
*/
// Code generated by mockery v2.33.1. DO NOT EDIT.

package mocks

import (
	godpugrpc "github.com/opiproject/godpu/grpc"
	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// Connector is an autogenerated mock type for the Connector type
type Connector struct {
	mock.Mock
}

type Connector_Expecter struct {
	mock *mock.Mock
}

func (_m *Connector) EXPECT() *Connector_Expecter {
	return &Connector_Expecter{mock: &_m.Mock}
}

// NewConn provides a mock function with given fields:
func (_m *Connector) NewConn() (grpc.ClientConnInterface, godpugrpc.Closer, error) {
	ret := _m.Called()

	var r0 grpc.ClientConnInterface
	var r1 godpugrpc.Closer
	var r2 error
	if rf, ok := ret.Get(0).(func() (grpc.ClientConnInterface, godpugrpc.Closer, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() grpc.ClientConnInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(grpc.ClientConnInterface)
		}
	}

	if rf, ok := ret.Get(1).(func() godpugrpc.Closer); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(godpugrpc.Closer)
		}
	}

	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Connector_NewConn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewConn'
type Connector_NewConn_Call struct {
	*mock.Call
}

// NewConn is a helper method to define mock.On call
func (_e *Connector_Expecter) NewConn() *Connector_NewConn_Call {
	return &Connector_NewConn_Call{Call: _e.mock.On("NewConn")}
}

func (_c *Connector_NewConn_Call) Run(run func()) *Connector_NewConn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Connector_NewConn_Call) Return(_a0 grpc.ClientConnInterface, _a1 godpugrpc.Closer, _a2 error) *Connector_NewConn_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *Connector_NewConn_Call) RunAndReturn(run func() (grpc.ClientConnInterface, godpugrpc.Closer, error)) *Connector_NewConn_Call {
	_c.Call.Return(run)
	return _c
}

// NewConnector creates a new instance of Connector. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConnector(t interface {
	mock.TestingT
	Cleanup(func())
}) *Connector {
	mock := &Connector{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
