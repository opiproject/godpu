/* SPDX-License-Identifier: Apache-2.0
   Copyright (c) 2023 Dell Inc, or its subsidiaries.
*/
// Code generated by mockery v2.33.1. DO NOT EDIT.

package mocks

import (
	context "context"

	_go "github.com/opiproject/opi-api/storage/v1alpha1/gen/go"

	emptypb "google.golang.org/protobuf/types/known/emptypb"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// MiddleendQosVolumeServiceClient is an autogenerated mock type for the MiddleendQosVolumeServiceClient type
type MiddleendQosVolumeServiceClient struct {
	mock.Mock
}

type MiddleendQosVolumeServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MiddleendQosVolumeServiceClient) EXPECT() *MiddleendQosVolumeServiceClient_Expecter {
	return &MiddleendQosVolumeServiceClient_Expecter{mock: &_m.Mock}
}

// CreateQosVolume provides a mock function with given fields: ctx, in, opts
func (_m *MiddleendQosVolumeServiceClient) CreateQosVolume(ctx context.Context, in *_go.CreateQosVolumeRequest, opts ...grpc.CallOption) (*_go.QosVolume, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *_go.QosVolume
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *_go.CreateQosVolumeRequest, ...grpc.CallOption) (*_go.QosVolume, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *_go.CreateQosVolumeRequest, ...grpc.CallOption) *_go.QosVolume); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*_go.QosVolume)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *_go.CreateQosVolumeRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MiddleendQosVolumeServiceClient_CreateQosVolume_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateQosVolume'
type MiddleendQosVolumeServiceClient_CreateQosVolume_Call struct {
	*mock.Call
}

// CreateQosVolume is a helper method to define mock.On call
//   - ctx context.Context
//   - in *_go.CreateQosVolumeRequest
//   - opts ...grpc.CallOption
func (_e *MiddleendQosVolumeServiceClient_Expecter) CreateQosVolume(ctx interface{}, in interface{}, opts ...interface{}) *MiddleendQosVolumeServiceClient_CreateQosVolume_Call {
	return &MiddleendQosVolumeServiceClient_CreateQosVolume_Call{Call: _e.mock.On("CreateQosVolume",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MiddleendQosVolumeServiceClient_CreateQosVolume_Call) Run(run func(ctx context.Context, in *_go.CreateQosVolumeRequest, opts ...grpc.CallOption)) *MiddleendQosVolumeServiceClient_CreateQosVolume_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*_go.CreateQosVolumeRequest), variadicArgs...)
	})
	return _c
}

func (_c *MiddleendQosVolumeServiceClient_CreateQosVolume_Call) Return(_a0 *_go.QosVolume, _a1 error) *MiddleendQosVolumeServiceClient_CreateQosVolume_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MiddleendQosVolumeServiceClient_CreateQosVolume_Call) RunAndReturn(run func(context.Context, *_go.CreateQosVolumeRequest, ...grpc.CallOption) (*_go.QosVolume, error)) *MiddleendQosVolumeServiceClient_CreateQosVolume_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteQosVolume provides a mock function with given fields: ctx, in, opts
func (_m *MiddleendQosVolumeServiceClient) DeleteQosVolume(ctx context.Context, in *_go.DeleteQosVolumeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *emptypb.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *_go.DeleteQosVolumeRequest, ...grpc.CallOption) (*emptypb.Empty, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *_go.DeleteQosVolumeRequest, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *_go.DeleteQosVolumeRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MiddleendQosVolumeServiceClient_DeleteQosVolume_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteQosVolume'
type MiddleendQosVolumeServiceClient_DeleteQosVolume_Call struct {
	*mock.Call
}

// DeleteQosVolume is a helper method to define mock.On call
//   - ctx context.Context
//   - in *_go.DeleteQosVolumeRequest
//   - opts ...grpc.CallOption
func (_e *MiddleendQosVolumeServiceClient_Expecter) DeleteQosVolume(ctx interface{}, in interface{}, opts ...interface{}) *MiddleendQosVolumeServiceClient_DeleteQosVolume_Call {
	return &MiddleendQosVolumeServiceClient_DeleteQosVolume_Call{Call: _e.mock.On("DeleteQosVolume",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MiddleendQosVolumeServiceClient_DeleteQosVolume_Call) Run(run func(ctx context.Context, in *_go.DeleteQosVolumeRequest, opts ...grpc.CallOption)) *MiddleendQosVolumeServiceClient_DeleteQosVolume_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*_go.DeleteQosVolumeRequest), variadicArgs...)
	})
	return _c
}

func (_c *MiddleendQosVolumeServiceClient_DeleteQosVolume_Call) Return(_a0 *emptypb.Empty, _a1 error) *MiddleendQosVolumeServiceClient_DeleteQosVolume_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MiddleendQosVolumeServiceClient_DeleteQosVolume_Call) RunAndReturn(run func(context.Context, *_go.DeleteQosVolumeRequest, ...grpc.CallOption) (*emptypb.Empty, error)) *MiddleendQosVolumeServiceClient_DeleteQosVolume_Call {
	_c.Call.Return(run)
	return _c
}

// GetQosVolume provides a mock function with given fields: ctx, in, opts
func (_m *MiddleendQosVolumeServiceClient) GetQosVolume(ctx context.Context, in *_go.GetQosVolumeRequest, opts ...grpc.CallOption) (*_go.QosVolume, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *_go.QosVolume
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *_go.GetQosVolumeRequest, ...grpc.CallOption) (*_go.QosVolume, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *_go.GetQosVolumeRequest, ...grpc.CallOption) *_go.QosVolume); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*_go.QosVolume)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *_go.GetQosVolumeRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MiddleendQosVolumeServiceClient_GetQosVolume_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetQosVolume'
type MiddleendQosVolumeServiceClient_GetQosVolume_Call struct {
	*mock.Call
}

// GetQosVolume is a helper method to define mock.On call
//   - ctx context.Context
//   - in *_go.GetQosVolumeRequest
//   - opts ...grpc.CallOption
func (_e *MiddleendQosVolumeServiceClient_Expecter) GetQosVolume(ctx interface{}, in interface{}, opts ...interface{}) *MiddleendQosVolumeServiceClient_GetQosVolume_Call {
	return &MiddleendQosVolumeServiceClient_GetQosVolume_Call{Call: _e.mock.On("GetQosVolume",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MiddleendQosVolumeServiceClient_GetQosVolume_Call) Run(run func(ctx context.Context, in *_go.GetQosVolumeRequest, opts ...grpc.CallOption)) *MiddleendQosVolumeServiceClient_GetQosVolume_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*_go.GetQosVolumeRequest), variadicArgs...)
	})
	return _c
}

func (_c *MiddleendQosVolumeServiceClient_GetQosVolume_Call) Return(_a0 *_go.QosVolume, _a1 error) *MiddleendQosVolumeServiceClient_GetQosVolume_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MiddleendQosVolumeServiceClient_GetQosVolume_Call) RunAndReturn(run func(context.Context, *_go.GetQosVolumeRequest, ...grpc.CallOption) (*_go.QosVolume, error)) *MiddleendQosVolumeServiceClient_GetQosVolume_Call {
	_c.Call.Return(run)
	return _c
}

// ListQosVolumes provides a mock function with given fields: ctx, in, opts
func (_m *MiddleendQosVolumeServiceClient) ListQosVolumes(ctx context.Context, in *_go.ListQosVolumesRequest, opts ...grpc.CallOption) (*_go.ListQosVolumesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *_go.ListQosVolumesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *_go.ListQosVolumesRequest, ...grpc.CallOption) (*_go.ListQosVolumesResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *_go.ListQosVolumesRequest, ...grpc.CallOption) *_go.ListQosVolumesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*_go.ListQosVolumesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *_go.ListQosVolumesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MiddleendQosVolumeServiceClient_ListQosVolumes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListQosVolumes'
type MiddleendQosVolumeServiceClient_ListQosVolumes_Call struct {
	*mock.Call
}

// ListQosVolumes is a helper method to define mock.On call
//   - ctx context.Context
//   - in *_go.ListQosVolumesRequest
//   - opts ...grpc.CallOption
func (_e *MiddleendQosVolumeServiceClient_Expecter) ListQosVolumes(ctx interface{}, in interface{}, opts ...interface{}) *MiddleendQosVolumeServiceClient_ListQosVolumes_Call {
	return &MiddleendQosVolumeServiceClient_ListQosVolumes_Call{Call: _e.mock.On("ListQosVolumes",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MiddleendQosVolumeServiceClient_ListQosVolumes_Call) Run(run func(ctx context.Context, in *_go.ListQosVolumesRequest, opts ...grpc.CallOption)) *MiddleendQosVolumeServiceClient_ListQosVolumes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*_go.ListQosVolumesRequest), variadicArgs...)
	})
	return _c
}

func (_c *MiddleendQosVolumeServiceClient_ListQosVolumes_Call) Return(_a0 *_go.ListQosVolumesResponse, _a1 error) *MiddleendQosVolumeServiceClient_ListQosVolumes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MiddleendQosVolumeServiceClient_ListQosVolumes_Call) RunAndReturn(run func(context.Context, *_go.ListQosVolumesRequest, ...grpc.CallOption) (*_go.ListQosVolumesResponse, error)) *MiddleendQosVolumeServiceClient_ListQosVolumes_Call {
	_c.Call.Return(run)
	return _c
}

// StatsQosVolume provides a mock function with given fields: ctx, in, opts
func (_m *MiddleendQosVolumeServiceClient) StatsQosVolume(ctx context.Context, in *_go.StatsQosVolumeRequest, opts ...grpc.CallOption) (*_go.StatsQosVolumeResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *_go.StatsQosVolumeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *_go.StatsQosVolumeRequest, ...grpc.CallOption) (*_go.StatsQosVolumeResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *_go.StatsQosVolumeRequest, ...grpc.CallOption) *_go.StatsQosVolumeResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*_go.StatsQosVolumeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *_go.StatsQosVolumeRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MiddleendQosVolumeServiceClient_StatsQosVolume_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StatsQosVolume'
type MiddleendQosVolumeServiceClient_StatsQosVolume_Call struct {
	*mock.Call
}

// StatsQosVolume is a helper method to define mock.On call
//   - ctx context.Context
//   - in *_go.StatsQosVolumeRequest
//   - opts ...grpc.CallOption
func (_e *MiddleendQosVolumeServiceClient_Expecter) StatsQosVolume(ctx interface{}, in interface{}, opts ...interface{}) *MiddleendQosVolumeServiceClient_StatsQosVolume_Call {
	return &MiddleendQosVolumeServiceClient_StatsQosVolume_Call{Call: _e.mock.On("StatsQosVolume",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MiddleendQosVolumeServiceClient_StatsQosVolume_Call) Run(run func(ctx context.Context, in *_go.StatsQosVolumeRequest, opts ...grpc.CallOption)) *MiddleendQosVolumeServiceClient_StatsQosVolume_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*_go.StatsQosVolumeRequest), variadicArgs...)
	})
	return _c
}

func (_c *MiddleendQosVolumeServiceClient_StatsQosVolume_Call) Return(_a0 *_go.StatsQosVolumeResponse, _a1 error) *MiddleendQosVolumeServiceClient_StatsQosVolume_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MiddleendQosVolumeServiceClient_StatsQosVolume_Call) RunAndReturn(run func(context.Context, *_go.StatsQosVolumeRequest, ...grpc.CallOption) (*_go.StatsQosVolumeResponse, error)) *MiddleendQosVolumeServiceClient_StatsQosVolume_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateQosVolume provides a mock function with given fields: ctx, in, opts
func (_m *MiddleendQosVolumeServiceClient) UpdateQosVolume(ctx context.Context, in *_go.UpdateQosVolumeRequest, opts ...grpc.CallOption) (*_go.QosVolume, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *_go.QosVolume
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *_go.UpdateQosVolumeRequest, ...grpc.CallOption) (*_go.QosVolume, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *_go.UpdateQosVolumeRequest, ...grpc.CallOption) *_go.QosVolume); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*_go.QosVolume)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *_go.UpdateQosVolumeRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MiddleendQosVolumeServiceClient_UpdateQosVolume_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateQosVolume'
type MiddleendQosVolumeServiceClient_UpdateQosVolume_Call struct {
	*mock.Call
}

// UpdateQosVolume is a helper method to define mock.On call
//   - ctx context.Context
//   - in *_go.UpdateQosVolumeRequest
//   - opts ...grpc.CallOption
func (_e *MiddleendQosVolumeServiceClient_Expecter) UpdateQosVolume(ctx interface{}, in interface{}, opts ...interface{}) *MiddleendQosVolumeServiceClient_UpdateQosVolume_Call {
	return &MiddleendQosVolumeServiceClient_UpdateQosVolume_Call{Call: _e.mock.On("UpdateQosVolume",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MiddleendQosVolumeServiceClient_UpdateQosVolume_Call) Run(run func(ctx context.Context, in *_go.UpdateQosVolumeRequest, opts ...grpc.CallOption)) *MiddleendQosVolumeServiceClient_UpdateQosVolume_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*_go.UpdateQosVolumeRequest), variadicArgs...)
	})
	return _c
}

func (_c *MiddleendQosVolumeServiceClient_UpdateQosVolume_Call) Return(_a0 *_go.QosVolume, _a1 error) *MiddleendQosVolumeServiceClient_UpdateQosVolume_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MiddleendQosVolumeServiceClient_UpdateQosVolume_Call) RunAndReturn(run func(context.Context, *_go.UpdateQosVolumeRequest, ...grpc.CallOption) (*_go.QosVolume, error)) *MiddleendQosVolumeServiceClient_UpdateQosVolume_Call {
	_c.Call.Return(run)
	return _c
}

// NewMiddleendQosVolumeServiceClient creates a new instance of MiddleendQosVolumeServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMiddleendQosVolumeServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MiddleendQosVolumeServiceClient {
	mock := &MiddleendQosVolumeServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
